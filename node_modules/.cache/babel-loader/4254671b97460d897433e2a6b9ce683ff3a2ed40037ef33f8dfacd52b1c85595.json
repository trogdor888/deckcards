{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrluf\\\\Desktop\\\\deck cards\\\\src\\\\components\\\\InfiniteCanvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./InfiniteCanvas.css\";\n\n// Base card templates\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardTemplates = [{\n  img: \"/assets/thumbnails/mathematics.svg\",\n  title: \"Mathematics\"\n}, {\n  img: \"/assets/thumbnails/programming.svg\",\n  title: \"Programming\"\n}, {\n  img: \"/assets/thumbnails/languages.svg\",\n  title: \"Languages\"\n}, {\n  img: \"/assets/thumbnails/history.svg\",\n  title: \"History\"\n}, {\n  img: \"/assets/thumbnails/quantum-mechanics.svg\",\n  title: \"Quantum Mechanics\"\n}, {\n  img: \"/assets/thumbnails/chemistry.svg\",\n  title: \"Chemistry\"\n}, {\n  img: \"/assets/thumbnails/geometry.svg\",\n  title: \"Geometry\"\n}, {\n  img: \"/assets/thumbnails/music.svg\",\n  title: \"Music\"\n}, {\n  img: \"/assets/thumbnails/astronomy.svg\",\n  title: \"Astronomy\"\n}, {\n  img: \"/assets/thumbnails/finance.svg\",\n  title: \"Finance\"\n}, {\n  img: \"/assets/thumbnails/technology.svg\",\n  title: \"Technology\"\n}, {\n  img: \"/assets/thumbnails/health.svg\",\n  title: \"Health\"\n}, {\n  img: \"/assets/thumbnails/sports.svg\",\n  title: \"Sports\"\n}, {\n  img: \"/assets/thumbnails/art.svg\",\n  title: \"Art\"\n}, {\n  img: \"/assets/thumbnails/design.svg\",\n  title: \"Design\"\n}, {\n  img: \"/assets/thumbnails/business.svg\",\n  title: \"Business\"\n}, {\n  img: \"/assets/thumbnails/psychology.svg\",\n  title: \"Psychology\"\n}, {\n  img: \"/assets/thumbnails/social.svg\",\n  title: \"Social\"\n}, {\n  img: \"/assets/thumbnails/cooking.svg\",\n  title: \"Cooking\"\n}, {\n  img: \"/assets/thumbnails/travel.svg\",\n  title: \"Travel\"\n}];\n\n// Generate many random cards to fill the screen\nconst generateCards = count => {\n  const cards = [];\n  for (let i = 0; i < count; i++) {\n    const template = cardTemplates[Math.floor(Math.random() * cardTemplates.length)];\n    cards.push({\n      id: i + 1,\n      img: template.img,\n      title: template.title\n    });\n  }\n  return cards;\n};\n\n// Generate 120 cards for better spacing and visual appeal\nconst cards = generateCards(120);\nexport default function InfiniteCanvas() {\n  _s();\n  const [offset, setOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [dragging, setDragging] = useState(false);\n  const [start, setStart] = useState({\n    x: 0,\n    y: 0\n  });\n\n  // Debug: Log the cards to make sure they're generated\n  console.log('Generated cards:', cards.length, cards.slice(0, 3));\n  function onMouseDown(e) {\n    setDragging(true);\n    setStart({\n      x: e.clientX - offset.x,\n      y: e.clientY - offset.y\n    });\n  }\n  function onMouseMove(e) {\n    if (!dragging) return;\n    setOffset({\n      x: e.clientX - start.x,\n      y: e.clientY - start.y\n    });\n  }\n  function onMouseUp() {\n    setDragging(false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"InfiniteCanvas\",\n    onMouseDown: onMouseDown,\n    onMouseMove: onMouseMove,\n    onMouseUp: onMouseUp,\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      className: \"background-video\",\n      autoPlay: true,\n      loop: true,\n      muted: true,\n      playsInline: true,\n      onLoadStart: () => console.log('Video loading started'),\n      onLoadedData: () => console.log('Video loaded successfully'),\n      onError: e => console.error('Video error:', e),\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: \"/assets/Cloud1.mp4\",\n        type: \"video/mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), \"Your browser does not support the video tag.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"animated-clouds-background\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CardGrid\",\n      style: {\n        transform: `translate(${offset.x}px, ${offset.y}px)`\n      },\n      children: cards.map(c => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"DeckCard\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: c.img,\n          alt: c.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: c.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, c.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(InfiniteCanvas, \"zjGCJWQkRnKpvtARcTKQAde/a74=\");\n_c = InfiniteCanvas;\nvar _c;\n$RefreshReg$(_c, \"InfiniteCanvas\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","cardTemplates","img","title","generateCards","count","cards","i","template","Math","floor","random","length","push","id","InfiniteCanvas","_s","offset","setOffset","x","y","dragging","setDragging","start","setStart","console","log","slice","onMouseDown","e","clientX","clientY","onMouseMove","onMouseUp","className","children","autoPlay","loop","muted","playsInline","onLoadStart","onLoadedData","onError","error","src","type","fileName","_jsxFileName","lineNumber","columnNumber","style","transform","map","c","alt","_c","$RefreshReg$"],"sources":["C:/Users/mrluf/Desktop/deck cards/src/components/InfiniteCanvas.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./InfiniteCanvas.css\";\r\n\r\n// Base card templates\r\nconst cardTemplates = [\r\n  { img: \"/assets/thumbnails/mathematics.svg\", title: \"Mathematics\" },\r\n  { img: \"/assets/thumbnails/programming.svg\", title: \"Programming\" },\r\n  { img: \"/assets/thumbnails/languages.svg\", title: \"Languages\" },\r\n  { img: \"/assets/thumbnails/history.svg\", title: \"History\" },\r\n  { img: \"/assets/thumbnails/quantum-mechanics.svg\", title: \"Quantum Mechanics\" },\r\n  { img: \"/assets/thumbnails/chemistry.svg\", title: \"Chemistry\" },\r\n  { img: \"/assets/thumbnails/geometry.svg\", title: \"Geometry\" },\r\n  { img: \"/assets/thumbnails/music.svg\", title: \"Music\" },\r\n  { img: \"/assets/thumbnails/astronomy.svg\", title: \"Astronomy\" },\r\n  { img: \"/assets/thumbnails/finance.svg\", title: \"Finance\" },\r\n  { img: \"/assets/thumbnails/technology.svg\", title: \"Technology\" },\r\n  { img: \"/assets/thumbnails/health.svg\", title: \"Health\" },\r\n  { img: \"/assets/thumbnails/sports.svg\", title: \"Sports\" },\r\n  { img: \"/assets/thumbnails/art.svg\", title: \"Art\" },\r\n  { img: \"/assets/thumbnails/design.svg\", title: \"Design\" },\r\n  { img: \"/assets/thumbnails/business.svg\", title: \"Business\" },\r\n  { img: \"/assets/thumbnails/psychology.svg\", title: \"Psychology\" },\r\n  { img: \"/assets/thumbnails/social.svg\", title: \"Social\" },\r\n  { img: \"/assets/thumbnails/cooking.svg\", title: \"Cooking\" },\r\n  { img: \"/assets/thumbnails/travel.svg\", title: \"Travel\" },\r\n];\r\n\r\n// Generate many random cards to fill the screen\r\nconst generateCards = (count: number) => {\r\n  const cards = [];\r\n  for (let i = 0; i < count; i++) {\r\n    const template = cardTemplates[Math.floor(Math.random() * cardTemplates.length)];\r\n    cards.push({\r\n      id: i + 1,\r\n      img: template.img,\r\n      title: template.title,\r\n    });\r\n  }\r\n  return cards;\r\n};\r\n\r\n// Generate 120 cards for better spacing and visual appeal\r\nconst cards = generateCards(120);\r\n\r\nexport default function InfiniteCanvas() {\r\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\r\n  const [dragging, setDragging] = useState(false);\r\n  const [start, setStart] = useState({ x: 0, y: 0 });\r\n\r\n  // Debug: Log the cards to make sure they're generated\r\n  console.log('Generated cards:', cards.length, cards.slice(0, 3));\r\n\r\n  function onMouseDown(e: React.MouseEvent) {\r\n    setDragging(true);\r\n    setStart({ x: e.clientX - offset.x, y: e.clientY - offset.y });\r\n  }\r\n  function onMouseMove(e: React.MouseEvent) {\r\n    if (!dragging) return;\r\n    setOffset({ x: e.clientX - start.x, y: e.clientY - start.y });\r\n  }\r\n  function onMouseUp() {\r\n    setDragging(false);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"InfiniteCanvas\"\r\n      onMouseDown={onMouseDown}\r\n      onMouseMove={onMouseMove}\r\n      onMouseUp={onMouseUp}\r\n    >\r\n      {/* Background Video */}\r\n      <video\r\n        className=\"background-video\"\r\n        autoPlay\r\n        loop\r\n        muted\r\n        playsInline\r\n        onLoadStart={() => console.log('Video loading started')}\r\n        onLoadedData={() => console.log('Video loaded successfully')}\r\n        onError={(e) => console.error('Video error:', e)}\r\n      >\r\n        <source src=\"/assets/Cloud1.mp4\" type=\"video/mp4\" />\r\n        Your browser does not support the video tag.\r\n      </video>\r\n      \r\n      {/* Fallback Animated Cloud Background - only shows if video fails */}\r\n      <div className=\"animated-clouds-background\"></div>\r\n      \r\n      <div\r\n        className=\"CardGrid\"\r\n        style={{ transform: `translate(${offset.x}px, ${offset.y}px)` }}\r\n      >\r\n        {cards.map((c) => (\r\n          <div key={c.id} className=\"DeckCard\">\r\n            <img src={c.img} alt={c.title} />\r\n            <div className=\"title\">{c.title}</div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n} "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,sBAAsB;;AAE7B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,GAAG,CACpB;EAAEC,GAAG,EAAE,oCAAoC;EAAEC,KAAK,EAAE;AAAc,CAAC,EACnE;EAAED,GAAG,EAAE,oCAAoC;EAAEC,KAAK,EAAE;AAAc,CAAC,EACnE;EAAED,GAAG,EAAE,kCAAkC;EAAEC,KAAK,EAAE;AAAY,CAAC,EAC/D;EAAED,GAAG,EAAE,gCAAgC;EAAEC,KAAK,EAAE;AAAU,CAAC,EAC3D;EAAED,GAAG,EAAE,0CAA0C;EAAEC,KAAK,EAAE;AAAoB,CAAC,EAC/E;EAAED,GAAG,EAAE,kCAAkC;EAAEC,KAAK,EAAE;AAAY,CAAC,EAC/D;EAAED,GAAG,EAAE,iCAAiC;EAAEC,KAAK,EAAE;AAAW,CAAC,EAC7D;EAAED,GAAG,EAAE,8BAA8B;EAAEC,KAAK,EAAE;AAAQ,CAAC,EACvD;EAAED,GAAG,EAAE,kCAAkC;EAAEC,KAAK,EAAE;AAAY,CAAC,EAC/D;EAAED,GAAG,EAAE,gCAAgC;EAAEC,KAAK,EAAE;AAAU,CAAC,EAC3D;EAAED,GAAG,EAAE,mCAAmC;EAAEC,KAAK,EAAE;AAAa,CAAC,EACjE;EAAED,GAAG,EAAE,+BAA+B;EAAEC,KAAK,EAAE;AAAS,CAAC,EACzD;EAAED,GAAG,EAAE,+BAA+B;EAAEC,KAAK,EAAE;AAAS,CAAC,EACzD;EAAED,GAAG,EAAE,4BAA4B;EAAEC,KAAK,EAAE;AAAM,CAAC,EACnD;EAAED,GAAG,EAAE,+BAA+B;EAAEC,KAAK,EAAE;AAAS,CAAC,EACzD;EAAED,GAAG,EAAE,iCAAiC;EAAEC,KAAK,EAAE;AAAW,CAAC,EAC7D;EAAED,GAAG,EAAE,mCAAmC;EAAEC,KAAK,EAAE;AAAa,CAAC,EACjE;EAAED,GAAG,EAAE,+BAA+B;EAAEC,KAAK,EAAE;AAAS,CAAC,EACzD;EAAED,GAAG,EAAE,gCAAgC;EAAEC,KAAK,EAAE;AAAU,CAAC,EAC3D;EAAED,GAAG,EAAE,+BAA+B;EAAEC,KAAK,EAAE;AAAS,CAAC,CAC1D;;AAED;AACA,MAAMC,aAAa,GAAIC,KAAa,IAAK;EACvC,MAAMC,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,EAAEE,CAAC,EAAE,EAAE;IAC9B,MAAMC,QAAQ,GAAGP,aAAa,CAACQ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGV,aAAa,CAACW,MAAM,CAAC,CAAC;IAChFN,KAAK,CAACO,IAAI,CAAC;MACTC,EAAE,EAAEP,CAAC,GAAG,CAAC;MACTL,GAAG,EAAEM,QAAQ,CAACN,GAAG;MACjBC,KAAK,EAAEK,QAAQ,CAACL;IAClB,CAAC,CAAC;EACJ;EACA,OAAOG,KAAK;AACd,CAAC;;AAED;AACA,MAAMA,KAAK,GAAGF,aAAa,CAAC,GAAG,CAAC;AAEhC,eAAe,SAASW,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACvC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGpB,QAAQ,CAAC;IAAEqB,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EACpD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACyB,KAAK,EAAEC,QAAQ,CAAC,GAAG1B,QAAQ,CAAC;IAAEqB,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;;EAElD;EACAK,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEpB,KAAK,CAACM,MAAM,EAAEN,KAAK,CAACqB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAEhE,SAASC,WAAWA,CAACC,CAAmB,EAAE;IACxCP,WAAW,CAAC,IAAI,CAAC;IACjBE,QAAQ,CAAC;MAAEL,CAAC,EAAEU,CAAC,CAACC,OAAO,GAAGb,MAAM,CAACE,CAAC;MAAEC,CAAC,EAAES,CAAC,CAACE,OAAO,GAAGd,MAAM,CAACG;IAAE,CAAC,CAAC;EAChE;EACA,SAASY,WAAWA,CAACH,CAAmB,EAAE;IACxC,IAAI,CAACR,QAAQ,EAAE;IACfH,SAAS,CAAC;MAAEC,CAAC,EAAEU,CAAC,CAACC,OAAO,GAAGP,KAAK,CAACJ,CAAC;MAAEC,CAAC,EAAES,CAAC,CAACE,OAAO,GAAGR,KAAK,CAACH;IAAE,CAAC,CAAC;EAC/D;EACA,SAASa,SAASA,CAAA,EAAG;IACnBX,WAAW,CAAC,KAAK,CAAC;EACpB;EAEA,oBACEtB,OAAA;IACEkC,SAAS,EAAC,gBAAgB;IAC1BN,WAAW,EAAEA,WAAY;IACzBI,WAAW,EAAEA,WAAY;IACzBC,SAAS,EAAEA,SAAU;IAAAE,QAAA,gBAGrBnC,OAAA;MACEkC,SAAS,EAAC,kBAAkB;MAC5BE,QAAQ;MACRC,IAAI;MACJC,KAAK;MACLC,WAAW;MACXC,WAAW,EAAEA,CAAA,KAAMf,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAE;MACxDe,YAAY,EAAEA,CAAA,KAAMhB,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAE;MAC7DgB,OAAO,EAAGb,CAAC,IAAKJ,OAAO,CAACkB,KAAK,CAAC,cAAc,EAAEd,CAAC,CAAE;MAAAM,QAAA,gBAEjDnC,OAAA;QAAQ4C,GAAG,EAAC,oBAAoB;QAACC,IAAI,EAAC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,gDAEtD;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAGRjD,OAAA;MAAKkC,SAAS,EAAC;IAA4B;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAElDjD,OAAA;MACEkC,SAAS,EAAC,UAAU;MACpBgB,KAAK,EAAE;QAAEC,SAAS,EAAE,aAAalC,MAAM,CAACE,CAAC,OAAOF,MAAM,CAACG,CAAC;MAAM,CAAE;MAAAe,QAAA,EAE/D7B,KAAK,CAAC8C,GAAG,CAAEC,CAAC,iBACXrD,OAAA;QAAgBkC,SAAS,EAAC,UAAU;QAAAC,QAAA,gBAClCnC,OAAA;UAAK4C,GAAG,EAAES,CAAC,CAACnD,GAAI;UAACoD,GAAG,EAAED,CAAC,CAAClD;QAAM;UAAA2C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACjCjD,OAAA;UAAKkC,SAAS,EAAC,OAAO;UAAAC,QAAA,EAAEkB,CAAC,CAAClD;QAAK;UAAA2C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA,GAF9BI,CAAC,CAACvC,EAAE;QAAAgC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGT,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACjC,EAAA,CA1DuBD,cAAc;AAAAwC,EAAA,GAAdxC,cAAc;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}