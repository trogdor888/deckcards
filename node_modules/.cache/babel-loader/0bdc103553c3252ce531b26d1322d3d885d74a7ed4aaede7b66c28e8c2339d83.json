{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrluf\\\\Desktop\\\\deck cards\\\\src\\\\components\\\\InfiniteCanvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// Generate 100 sample cards with random Unsplash thumbnails\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cards = Array.from({\n  length: 100\n}, (_, i) => ({\n  id: i,\n  img: `https://source.unsplash.com/collection/1163637/200x200?sig=${i}`,\n  title: `Card ${i + 1}`\n}));\n\n// Custom deck-card component\nconst DeckCard = ({\n  img,\n  title\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"deck-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: img,\n      alt: title,\n      onError: e => {\n        // Fallback to a placeholder if image fails to load\n        e.currentTarget.src = `https://via.placeholder.com/80x80/cccccc/ffffff?text=${encodeURIComponent(title.slice(0, 1))}`;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"title\",\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_c = DeckCard;\nexport default function InfiniteCanvas() {\n  _s();\n  const [offset, setOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [dragging, setDragging] = useState(false);\n  const [start, setStart] = useState({\n    x: 0,\n    y: 0\n  });\n  function onMouseDown(e) {\n    setDragging(true);\n    setStart({\n      x: e.clientX - offset.x,\n      y: e.clientY - offset.y\n    });\n  }\n  function onMouseMove(e) {\n    if (!dragging) return;\n    setOffset({\n      x: e.clientX - start.x,\n      y: e.clientY - start.y\n    });\n  }\n  function onMouseUp() {\n    setDragging(false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"InfiniteCanvas\",\n    onMouseDown: onMouseDown,\n    onMouseMove: onMouseMove,\n    onMouseUp: onMouseUp,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CardGrid\",\n      style: {\n        transform: `translate(${offset.x}px, ${offset.y}px)`\n      },\n      children: cards.map(c => /*#__PURE__*/_jsxDEV(DeckCard, {\n        img: c.img,\n        title: c.title\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(InfiniteCanvas, \"zjGCJWQkRnKpvtARcTKQAde/a74=\");\n_c2 = InfiniteCanvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"DeckCard\");\n$RefreshReg$(_c2, \"InfiniteCanvas\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","cards","Array","from","length","_","i","id","img","title","DeckCard","className","children","src","alt","onError","e","currentTarget","encodeURIComponent","slice","fileName","_jsxFileName","lineNumber","columnNumber","_c","InfiniteCanvas","_s","offset","setOffset","x","y","dragging","setDragging","start","setStart","onMouseDown","clientX","clientY","onMouseMove","onMouseUp","style","transform","map","c","_c2","$RefreshReg$"],"sources":["C:/Users/mrluf/Desktop/deck cards/src/components/InfiniteCanvas.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\n\r\n// Generate 100 sample cards with random Unsplash thumbnails\r\nconst cards = Array.from({ length: 100 }, (_, i) => ({\r\n  id: i,\r\n  img: `https://source.unsplash.com/collection/1163637/200x200?sig=${i}`,\r\n  title: `Card ${i + 1}`\r\n}));\r\n\r\n// Custom deck-card component\r\nconst DeckCard: React.FC<{ img: string; title: string }> = ({ img, title }) => {\r\n  return (\r\n    <div className=\"deck-card\">\r\n      <img \r\n        src={img} \r\n        alt={title}\r\n        onError={(e) => {\r\n          // Fallback to a placeholder if image fails to load\r\n          e.currentTarget.src = `https://via.placeholder.com/80x80/cccccc/ffffff?text=${encodeURIComponent(title.slice(0, 1))}`;\r\n        }}\r\n      />\r\n      <div className=\"title\">{title}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function InfiniteCanvas() {\r\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\r\n  const [dragging, setDragging] = useState(false);\r\n  const [start, setStart] = useState({ x: 0, y: 0 });\r\n\r\n  function onMouseDown(e: React.MouseEvent) {\r\n    setDragging(true);\r\n    setStart({ x: e.clientX - offset.x, y: e.clientY - offset.y });\r\n  }\r\n\r\n  function onMouseMove(e: React.MouseEvent) {\r\n    if (!dragging) return;\r\n    setOffset({ x: e.clientX - start.x, y: e.clientY - start.y });\r\n  }\r\n\r\n  function onMouseUp() {\r\n    setDragging(false);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"InfiniteCanvas\"\r\n      onMouseDown={onMouseDown}\r\n      onMouseMove={onMouseMove}\r\n      onMouseUp={onMouseUp}\r\n    >\r\n      <div\r\n        className=\"CardGrid\"\r\n        style={{ transform: `translate(${offset.x}px, ${offset.y}px)` }}\r\n      >\r\n        {cards.map(c => (\r\n          <DeckCard key={c.id} img={c.img} title={c.title} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n} "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAA2B,OAAO;;AAE1D;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAAC;EAAEC,MAAM,EAAE;AAAI,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,MAAM;EACnDC,EAAE,EAAED,CAAC;EACLE,GAAG,EAAE,8DAA8DF,CAAC,EAAE;EACtEG,KAAK,EAAE,QAAQH,CAAC,GAAG,CAAC;AACtB,CAAC,CAAC,CAAC;;AAEH;AACA,MAAMI,QAAkD,GAAGA,CAAC;EAAEF,GAAG;EAAEC;AAAM,CAAC,KAAK;EAC7E,oBACET,OAAA;IAAKW,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBZ,OAAA;MACEa,GAAG,EAAEL,GAAI;MACTM,GAAG,EAAEL,KAAM;MACXM,OAAO,EAAGC,CAAC,IAAK;QACd;QACAA,CAAC,CAACC,aAAa,CAACJ,GAAG,GAAG,wDAAwDK,kBAAkB,CAACT,KAAK,CAACU,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;MACvH;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACFvB,OAAA;MAAKW,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAEH;IAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjC,CAAC;AAEV,CAAC;AAACC,EAAA,GAdId,QAAkD;AAgBxD,eAAe,SAASe,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACvC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAG9B,QAAQ,CAAC;IAAE+B,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EACpD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGlC,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACmC,KAAK,EAAEC,QAAQ,CAAC,GAAGpC,QAAQ,CAAC;IAAE+B,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAElD,SAASK,WAAWA,CAACnB,CAAmB,EAAE;IACxCgB,WAAW,CAAC,IAAI,CAAC;IACjBE,QAAQ,CAAC;MAAEL,CAAC,EAAEb,CAAC,CAACoB,OAAO,GAAGT,MAAM,CAACE,CAAC;MAAEC,CAAC,EAAEd,CAAC,CAACqB,OAAO,GAAGV,MAAM,CAACG;IAAE,CAAC,CAAC;EAChE;EAEA,SAASQ,WAAWA,CAACtB,CAAmB,EAAE;IACxC,IAAI,CAACe,QAAQ,EAAE;IACfH,SAAS,CAAC;MAAEC,CAAC,EAAEb,CAAC,CAACoB,OAAO,GAAGH,KAAK,CAACJ,CAAC;MAAEC,CAAC,EAAEd,CAAC,CAACqB,OAAO,GAAGJ,KAAK,CAACH;IAAE,CAAC,CAAC;EAC/D;EAEA,SAASS,SAASA,CAAA,EAAG;IACnBP,WAAW,CAAC,KAAK,CAAC;EACpB;EAEA,oBACEhC,OAAA;IACEW,SAAS,EAAC,gBAAgB;IAC1BwB,WAAW,EAAEA,WAAY;IACzBG,WAAW,EAAEA,WAAY;IACzBC,SAAS,EAAEA,SAAU;IAAA3B,QAAA,eAErBZ,OAAA;MACEW,SAAS,EAAC,UAAU;MACpB6B,KAAK,EAAE;QAAEC,SAAS,EAAE,aAAad,MAAM,CAACE,CAAC,OAAOF,MAAM,CAACG,CAAC;MAAM,CAAE;MAAAlB,QAAA,EAE/DX,KAAK,CAACyC,GAAG,CAACC,CAAC,iBACV3C,OAAA,CAACU,QAAQ;QAAYF,GAAG,EAAEmC,CAAC,CAACnC,GAAI;QAACC,KAAK,EAAEkC,CAAC,CAAClC;MAAM,GAAjCkC,CAAC,CAACpC,EAAE;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA+B,CACnD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACG,EAAA,CApCuBD,cAAc;AAAAmB,GAAA,GAAdnB,cAAc;AAAA,IAAAD,EAAA,EAAAoB,GAAA;AAAAC,YAAA,CAAArB,EAAA;AAAAqB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}