{"ast":null,"code":"import { create } from 'zustand';\n// Sample cards for different categories\nconst mathCards = [{\n  id: 'm1',\n  name: 'Basic Math',\n  category: 'Mathematics',\n  level: 'purple',\n  dateEarned: new Date('2024-01-15'),\n  prerequisites: [],\n  description: 'Mastered basic arithmetic operations'\n}, {\n  id: 'm2',\n  name: 'Algebra Basics',\n  category: 'Mathematics',\n  level: 'yellow',\n  dateEarned: new Date('2024-02-01'),\n  prerequisites: ['m1'],\n  description: 'Understanding of basic algebraic concepts'\n}, {\n  id: 'm3',\n  name: 'Calculus Fundamentals',\n  category: 'Mathematics',\n  level: 'red',\n  dateEarned: new Date('2024-03-01'),\n  prerequisites: ['m2'],\n  description: 'Mastered differential and integral calculus'\n}];\nconst programmingCards = [{\n  id: 'p1',\n  name: 'HTML & CSS Basics',\n  category: 'Programming',\n  level: 'purple',\n  dateEarned: new Date('2024-01-10'),\n  prerequisites: [],\n  description: 'Understanding of web page structure and styling'\n}, {\n  id: 'p2',\n  name: 'JavaScript Fundamentals',\n  category: 'Programming',\n  level: 'yellow',\n  dateEarned: new Date('2024-02-15'),\n  prerequisites: ['p1'],\n  description: 'Mastered JavaScript programming basics'\n}, {\n  id: 'p3',\n  name: 'React Development',\n  category: 'Programming',\n  level: 'red',\n  dateEarned: new Date('2024-03-10'),\n  prerequisites: ['p2'],\n  description: 'Expert in React application development'\n}];\nconst languageCards = [{\n  id: 'l1',\n  name: 'Basic Vocabulary',\n  category: 'Languages',\n  level: 'purple',\n  dateEarned: new Date('2024-01-05'),\n  prerequisites: [],\n  description: 'Mastered 1000 essential words'\n}, {\n  id: 'l2',\n  name: 'Grammar Mastery',\n  category: 'Languages',\n  level: 'yellow',\n  dateEarned: new Date('2024-02-20'),\n  prerequisites: ['l1'],\n  description: 'Understanding of complex grammar structures'\n}, {\n  id: 'l3',\n  name: 'Fluency Achievement',\n  category: 'Languages',\n  level: 'red',\n  dateEarned: new Date('2024-03-15'),\n  prerequisites: ['l2'],\n  description: 'Achieved conversational fluency'\n}];\nconst scienceCards = [{\n  id: 's1',\n  name: 'Basic Physics',\n  category: 'Science',\n  level: 'purple',\n  dateEarned: new Date('2024-01-20'),\n  prerequisites: [],\n  description: 'Understanding of fundamental physics concepts'\n}, {\n  id: 's2',\n  name: 'Chemistry Basics',\n  category: 'Science',\n  level: 'yellow',\n  dateEarned: new Date('2024-02-25'),\n  prerequisites: ['s1'],\n  description: 'Mastered basic chemical reactions'\n}, {\n  id: 's3',\n  name: 'Biology Fundamentals',\n  category: 'Science',\n  level: 'red',\n  dateEarned: new Date('2024-03-20'),\n  prerequisites: ['s2'],\n  description: 'Understanding of cellular biology'\n}];\n\n// Sample decks\nconst sampleDecks = [{\n  id: 'd1',\n  name: 'Math Mastery',\n  tier: 'starter',\n  capacity: 10,\n  cards: mathCards,\n  isArchived: false\n}, {\n  id: 'd2',\n  name: 'Programming Journey',\n  tier: 'student',\n  capacity: 25,\n  cards: programmingCards,\n  isArchived: false\n}, {\n  id: 'd3',\n  name: 'Language Learning',\n  tier: 'scholars',\n  capacity: 50,\n  cards: languageCards,\n  isArchived: false\n}, {\n  id: 'd4',\n  name: 'Science Explorer',\n  tier: 'master',\n  capacity: 100,\n  cards: scienceCards,\n  isArchived: false\n}, {\n  id: 'd5',\n  name: 'Archived Math Cards',\n  tier: 'starter',\n  capacity: 10,\n  cards: [],\n  isArchived: true\n}];\nexport const useDeckStore = create(set => ({\n  decks: sampleDecks,\n  activeDeckId: 'd1',\n  addDeck: deck => set(state => ({\n    decks: [...state.decks, deck]\n  })),\n  removeDeck: deckId => set(state => ({\n    decks: state.decks.filter(deck => deck.id !== deckId)\n  })),\n  addCardToDeck: (deckId, card) => set(state => ({\n    decks: state.decks.map(deck => deck.id === deckId ? {\n      ...deck,\n      cards: [...deck.cards, card]\n    } : deck)\n  })),\n  removeCardFromDeck: (deckId, cardId) => set(state => ({\n    decks: state.decks.map(deck => deck.id === deckId ? {\n      ...deck,\n      cards: deck.cards.filter(card => card.id !== cardId)\n    } : deck)\n  })),\n  setActiveDeck: deckId => set({\n    activeDeckId: deckId\n  }),\n  upgradeDeck: (deckId, newTier) => set(state => ({\n    decks: state.decks.map(deck => deck.id === deckId ? {\n      ...deck,\n      tier: newTier\n    } : deck)\n  })),\n  archiveDeck: deckId => set(state => ({\n    decks: state.decks.map(deck => deck.id === deckId ? {\n      ...deck,\n      isArchived: true\n    } : deck)\n  }))\n}));","map":{"version":3,"names":["create","mathCards","id","name","category","level","dateEarned","Date","prerequisites","description","programmingCards","languageCards","scienceCards","sampleDecks","tier","capacity","cards","isArchived","useDeckStore","set","decks","activeDeckId","addDeck","deck","state","removeDeck","deckId","filter","addCardToDeck","card","map","removeCardFromDeck","cardId","setActiveDeck","upgradeDeck","newTier","archiveDeck"],"sources":["C:/Users/mrluf/Desktop/deck cards/src/store/deckStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { Card, Deck, DeckTier } from '../types';\r\n\r\n// Sample cards for different categories\r\nconst mathCards: Card[] = [\r\n  {\r\n    id: 'm1',\r\n    name: 'Basic Math',\r\n    category: 'Mathematics',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-15'),\r\n    prerequisites: [],\r\n    description: 'Mastered basic arithmetic operations',\r\n  },\r\n  {\r\n    id: 'm2',\r\n    name: 'Algebra Basics',\r\n    category: 'Mathematics',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-02-01'),\r\n    prerequisites: ['m1'],\r\n    description: 'Understanding of basic algebraic concepts',\r\n  },\r\n  {\r\n    id: 'm3',\r\n    name: 'Calculus Fundamentals',\r\n    category: 'Mathematics',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-01'),\r\n    prerequisites: ['m2'],\r\n    description: 'Mastered differential and integral calculus',\r\n  },\r\n];\r\n\r\nconst programmingCards: Card[] = [\r\n  {\r\n    id: 'p1',\r\n    name: 'HTML & CSS Basics',\r\n    category: 'Programming',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-10'),\r\n    prerequisites: [],\r\n    description: 'Understanding of web page structure and styling',\r\n  },\r\n  {\r\n    id: 'p2',\r\n    name: 'JavaScript Fundamentals',\r\n    category: 'Programming',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-02-15'),\r\n    prerequisites: ['p1'],\r\n    description: 'Mastered JavaScript programming basics',\r\n  },\r\n  {\r\n    id: 'p3',\r\n    name: 'React Development',\r\n    category: 'Programming',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-10'),\r\n    prerequisites: ['p2'],\r\n    description: 'Expert in React application development',\r\n  },\r\n];\r\n\r\nconst languageCards: Card[] = [\r\n  {\r\n    id: 'l1',\r\n    name: 'Basic Vocabulary',\r\n    category: 'Languages',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-05'),\r\n    prerequisites: [],\r\n    description: 'Mastered 1000 essential words',\r\n  },\r\n  {\r\n    id: 'l2',\r\n    name: 'Grammar Mastery',\r\n    category: 'Languages',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-02-20'),\r\n    prerequisites: ['l1'],\r\n    description: 'Understanding of complex grammar structures',\r\n  },\r\n  {\r\n    id: 'l3',\r\n    name: 'Fluency Achievement',\r\n    category: 'Languages',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-15'),\r\n    prerequisites: ['l2'],\r\n    description: 'Achieved conversational fluency',\r\n  },\r\n];\r\n\r\nconst scienceCards: Card[] = [\r\n  {\r\n    id: 's1',\r\n    name: 'Basic Physics',\r\n    category: 'Science',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-20'),\r\n    prerequisites: [],\r\n    description: 'Understanding of fundamental physics concepts',\r\n  },\r\n  {\r\n    id: 's2',\r\n    name: 'Chemistry Basics',\r\n    category: 'Science',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-02-25'),\r\n    prerequisites: ['s1'],\r\n    description: 'Mastered basic chemical reactions',\r\n  },\r\n  {\r\n    id: 's3',\r\n    name: 'Biology Fundamentals',\r\n    category: 'Science',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-20'),\r\n    prerequisites: ['s2'],\r\n    description: 'Understanding of cellular biology',\r\n  },\r\n];\r\n\r\n// Sample decks\r\nconst sampleDecks: Deck[] = [\r\n  {\r\n    id: 'd1',\r\n    name: 'Math Mastery',\r\n    tier: 'starter',\r\n    capacity: 10,\r\n    cards: mathCards,\r\n    isArchived: false,\r\n  },\r\n  {\r\n    id: 'd2',\r\n    name: 'Programming Journey',\r\n    tier: 'student',\r\n    capacity: 25,\r\n    cards: programmingCards,\r\n    isArchived: false,\r\n  },\r\n  {\r\n    id: 'd3',\r\n    name: 'Language Learning',\r\n    tier: 'scholars',\r\n    capacity: 50,\r\n    cards: languageCards,\r\n    isArchived: false,\r\n  },\r\n  {\r\n    id: 'd4',\r\n    name: 'Science Explorer',\r\n    tier: 'master',\r\n    capacity: 100,\r\n    cards: scienceCards,\r\n    isArchived: false,\r\n  },\r\n  {\r\n    id: 'd5',\r\n    name: 'Archived Math Cards',\r\n    tier: 'starter',\r\n    capacity: 10,\r\n    cards: [],\r\n    isArchived: true,\r\n  },\r\n];\r\n\r\ninterface DeckStore {\r\n  decks: Deck[];\r\n  activeDeckId: string | null;\r\n  addDeck: (deck: Deck) => void;\r\n  removeDeck: (deckId: string) => void;\r\n  addCardToDeck: (deckId: string, card: Card) => void;\r\n  removeCardFromDeck: (deckId: string, cardId: string) => void;\r\n  setActiveDeck: (deckId: string) => void;\r\n  upgradeDeck: (deckId: string, newTier: DeckTier) => void;\r\n  archiveDeck: (deckId: string) => void;\r\n}\r\n\r\nexport const useDeckStore = create<DeckStore>((set) => ({\r\n  decks: sampleDecks,\r\n  activeDeckId: 'd1',\r\n\r\n  addDeck: (deck) =>\r\n    set((state) => ({\r\n      decks: [...state.decks, deck],\r\n    })),\r\n\r\n  removeDeck: (deckId) =>\r\n    set((state) => ({\r\n      decks: state.decks.filter((deck) => deck.id !== deckId),\r\n    })),\r\n\r\n  addCardToDeck: (deckId, card) =>\r\n    set((state) => ({\r\n      decks: state.decks.map((deck) =>\r\n        deck.id === deckId\r\n          ? {\r\n              ...deck,\r\n              cards: [...deck.cards, card],\r\n            }\r\n          : deck\r\n      ),\r\n    })),\r\n\r\n  removeCardFromDeck: (deckId, cardId) =>\r\n    set((state) => ({\r\n      decks: state.decks.map((deck) =>\r\n        deck.id === deckId\r\n          ? {\r\n              ...deck,\r\n              cards: deck.cards.filter((card) => card.id !== cardId),\r\n            }\r\n          : deck\r\n      ),\r\n    })),\r\n\r\n  setActiveDeck: (deckId) =>\r\n    set({\r\n      activeDeckId: deckId,\r\n    }),\r\n\r\n  upgradeDeck: (deckId, newTier) =>\r\n    set((state) => ({\r\n      decks: state.decks.map((deck) =>\r\n        deck.id === deckId\r\n          ? {\r\n              ...deck,\r\n              tier: newTier,\r\n            }\r\n          : deck\r\n      ),\r\n    })),\r\n\r\n  archiveDeck: (deckId) =>\r\n    set((state) => ({\r\n      decks: state.decks.map((deck) =>\r\n        deck.id === deckId\r\n          ? {\r\n              ...deck,\r\n              isArchived: true,\r\n            }\r\n          : deck\r\n      ),\r\n    })),\r\n})); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}