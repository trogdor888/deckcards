{"ast":null,"code":"import { create } from 'zustand';\n// Sample data\nconst sampleCards = [{\n  id: '1',\n  name: 'Basic Math',\n  category: 'Mathematics',\n  level: 'purple',\n  dateEarned: new Date(),\n  prerequisites: [],\n  description: 'Mastered basic arithmetic operations'\n}, {\n  id: '2',\n  name: 'Algebra Basics',\n  category: 'Mathematics',\n  level: 'yellow',\n  dateEarned: new Date(),\n  prerequisites: ['1'],\n  description: 'Understanding of basic algebraic concepts'\n}];\nconst sampleDeck = {\n  id: '1',\n  name: 'Math Deck',\n  tier: 'starter',\n  capacity: 10,\n  cards: sampleCards,\n  isArchived: false\n};\nexport const useDeckStore = create(set => ({\n  decks: [sampleDeck],\n  activeDeckId: '1',\n  addDeck: deck => set(state => ({\n    decks: [...state.decks, deck]\n  })),\n  removeDeck: deckId => set(state => ({\n    decks: state.decks.filter(deck => deck.id !== deckId)\n  })),\n  addCardToDeck: (deckId, card) => set(state => ({\n    decks: state.decks.map(deck => deck.id === deckId ? {\n      ...deck,\n      cards: [...deck.cards, card]\n    } : deck)\n  })),\n  removeCardFromDeck: (deckId, cardId) => set(state => ({\n    decks: state.decks.map(deck => deck.id === deckId ? {\n      ...deck,\n      cards: deck.cards.filter(card => card.id !== cardId)\n    } : deck)\n  })),\n  setActiveDeck: deckId => set({\n    activeDeckId: deckId\n  }),\n  upgradeDeck: (deckId, newTier) => set(state => ({\n    decks: state.decks.map(deck => deck.id === deckId ? {\n      ...deck,\n      tier: newTier\n    } : deck)\n  })),\n  archiveDeck: deckId => set(state => ({\n    decks: state.decks.map(deck => deck.id === deckId ? {\n      ...deck,\n      isArchived: true\n    } : deck)\n  }))\n}));","map":{"version":3,"names":["create","sampleCards","id","name","category","level","dateEarned","Date","prerequisites","description","sampleDeck","tier","capacity","cards","isArchived","useDeckStore","set","decks","activeDeckId","addDeck","deck","state","removeDeck","deckId","filter","addCardToDeck","card","map","removeCardFromDeck","cardId","setActiveDeck","upgradeDeck","newTier","archiveDeck"],"sources":["C:/Users/mrluf/Desktop/deck cards/src/store/deckStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { Card, Deck, DeckTier } from '../types';\r\n\r\n// Sample data\r\nconst sampleCards: Card[] = [\r\n  {\r\n    id: '1',\r\n    name: 'Basic Math',\r\n    category: 'Mathematics',\r\n    level: 'purple',\r\n    dateEarned: new Date(),\r\n    prerequisites: [],\r\n    description: 'Mastered basic arithmetic operations',\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Algebra Basics',\r\n    category: 'Mathematics',\r\n    level: 'yellow',\r\n    dateEarned: new Date(),\r\n    prerequisites: ['1'],\r\n    description: 'Understanding of basic algebraic concepts',\r\n  },\r\n];\r\n\r\nconst sampleDeck: Deck = {\r\n  id: '1',\r\n  name: 'Math Deck',\r\n  tier: 'starter',\r\n  capacity: 10,\r\n  cards: sampleCards,\r\n  isArchived: false,\r\n};\r\n\r\ninterface DeckStore {\r\n  decks: Deck[];\r\n  activeDeckId: string | null;\r\n  addDeck: (deck: Deck) => void;\r\n  removeDeck: (deckId: string) => void;\r\n  addCardToDeck: (deckId: string, card: Card) => void;\r\n  removeCardFromDeck: (deckId: string, cardId: string) => void;\r\n  setActiveDeck: (deckId: string) => void;\r\n  upgradeDeck: (deckId: string, newTier: DeckTier) => void;\r\n  archiveDeck: (deckId: string) => void;\r\n}\r\n\r\nexport const useDeckStore = create<DeckStore>((set) => ({\r\n  decks: [sampleDeck],\r\n  activeDeckId: '1',\r\n\r\n  addDeck: (deck) =>\r\n    set((state) => ({\r\n      decks: [...state.decks, deck],\r\n    })),\r\n\r\n  removeDeck: (deckId) =>\r\n    set((state) => ({\r\n      decks: state.decks.filter((deck) => deck.id !== deckId),\r\n    })),\r\n\r\n  addCardToDeck: (deckId, card) =>\r\n    set((state) => ({\r\n      decks: state.decks.map((deck) =>\r\n        deck.id === deckId\r\n          ? {\r\n              ...deck,\r\n              cards: [...deck.cards, card],\r\n            }\r\n          : deck\r\n      ),\r\n    })),\r\n\r\n  removeCardFromDeck: (deckId, cardId) =>\r\n    set((state) => ({\r\n      decks: state.decks.map((deck) =>\r\n        deck.id === deckId\r\n          ? {\r\n              ...deck,\r\n              cards: deck.cards.filter((card) => card.id !== cardId),\r\n            }\r\n          : deck\r\n      ),\r\n    })),\r\n\r\n  setActiveDeck: (deckId) =>\r\n    set({\r\n      activeDeckId: deckId,\r\n    }),\r\n\r\n  upgradeDeck: (deckId, newTier) =>\r\n    set((state) => ({\r\n      decks: state.decks.map((deck) =>\r\n        deck.id === deckId\r\n          ? {\r\n              ...deck,\r\n              tier: newTier,\r\n            }\r\n          : deck\r\n      ),\r\n    })),\r\n\r\n  archiveDeck: (deckId) =>\r\n    set((state) => ({\r\n      decks: state.decks.map((deck) =>\r\n        deck.id === deckId\r\n          ? {\r\n              ...deck,\r\n              isArchived: true,\r\n            }\r\n          : deck\r\n      ),\r\n    })),\r\n})); "],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAGhC;AACA,MAAMC,WAAmB,GAAG,CAC1B;EACEC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAE,aAAa;EACvBC,KAAK,EAAE,QAAQ;EACfC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC;EACtBC,aAAa,EAAE,EAAE;EACjBC,WAAW,EAAE;AACf,CAAC,EACD;EACEP,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,gBAAgB;EACtBC,QAAQ,EAAE,aAAa;EACvBC,KAAK,EAAE,QAAQ;EACfC,UAAU,EAAE,IAAIC,IAAI,CAAC,CAAC;EACtBC,aAAa,EAAE,CAAC,GAAG,CAAC;EACpBC,WAAW,EAAE;AACf,CAAC,CACF;AAED,MAAMC,UAAgB,GAAG;EACvBR,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,WAAW;EACjBQ,IAAI,EAAE,SAAS;EACfC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAEZ,WAAW;EAClBa,UAAU,EAAE;AACd,CAAC;AAcD,OAAO,MAAMC,YAAY,GAAGf,MAAM,CAAagB,GAAG,KAAM;EACtDC,KAAK,EAAE,CAACP,UAAU,CAAC;EACnBQ,YAAY,EAAE,GAAG;EAEjBC,OAAO,EAAGC,IAAI,IACZJ,GAAG,CAAEK,KAAK,KAAM;IACdJ,KAAK,EAAE,CAAC,GAAGI,KAAK,CAACJ,KAAK,EAAEG,IAAI;EAC9B,CAAC,CAAC,CAAC;EAELE,UAAU,EAAGC,MAAM,IACjBP,GAAG,CAAEK,KAAK,KAAM;IACdJ,KAAK,EAAEI,KAAK,CAACJ,KAAK,CAACO,MAAM,CAAEJ,IAAI,IAAKA,IAAI,CAAClB,EAAE,KAAKqB,MAAM;EACxD,CAAC,CAAC,CAAC;EAELE,aAAa,EAAEA,CAACF,MAAM,EAAEG,IAAI,KAC1BV,GAAG,CAAEK,KAAK,KAAM;IACdJ,KAAK,EAAEI,KAAK,CAACJ,KAAK,CAACU,GAAG,CAAEP,IAAI,IAC1BA,IAAI,CAAClB,EAAE,KAAKqB,MAAM,GACd;MACE,GAAGH,IAAI;MACPP,KAAK,EAAE,CAAC,GAAGO,IAAI,CAACP,KAAK,EAAEa,IAAI;IAC7B,CAAC,GACDN,IACN;EACF,CAAC,CAAC,CAAC;EAELQ,kBAAkB,EAAEA,CAACL,MAAM,EAAEM,MAAM,KACjCb,GAAG,CAAEK,KAAK,KAAM;IACdJ,KAAK,EAAEI,KAAK,CAACJ,KAAK,CAACU,GAAG,CAAEP,IAAI,IAC1BA,IAAI,CAAClB,EAAE,KAAKqB,MAAM,GACd;MACE,GAAGH,IAAI;MACPP,KAAK,EAAEO,IAAI,CAACP,KAAK,CAACW,MAAM,CAAEE,IAAI,IAAKA,IAAI,CAACxB,EAAE,KAAK2B,MAAM;IACvD,CAAC,GACDT,IACN;EACF,CAAC,CAAC,CAAC;EAELU,aAAa,EAAGP,MAAM,IACpBP,GAAG,CAAC;IACFE,YAAY,EAAEK;EAChB,CAAC,CAAC;EAEJQ,WAAW,EAAEA,CAACR,MAAM,EAAES,OAAO,KAC3BhB,GAAG,CAAEK,KAAK,KAAM;IACdJ,KAAK,EAAEI,KAAK,CAACJ,KAAK,CAACU,GAAG,CAAEP,IAAI,IAC1BA,IAAI,CAAClB,EAAE,KAAKqB,MAAM,GACd;MACE,GAAGH,IAAI;MACPT,IAAI,EAAEqB;IACR,CAAC,GACDZ,IACN;EACF,CAAC,CAAC,CAAC;EAELa,WAAW,EAAGV,MAAM,IAClBP,GAAG,CAAEK,KAAK,KAAM;IACdJ,KAAK,EAAEI,KAAK,CAACJ,KAAK,CAACU,GAAG,CAAEP,IAAI,IAC1BA,IAAI,CAAClB,EAAE,KAAKqB,MAAM,GACd;MACE,GAAGH,IAAI;MACPN,UAAU,EAAE;IACd,CAAC,GACDM,IACN;EACF,CAAC,CAAC;AACN,CAAC,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}