{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrluf\\\\Desktop\\\\deck cards\\\\src\\\\components\\\\Deck.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { DECK_TIERS } from '../types';\nimport { Card } from './Card';\nimport { useDeckStore } from '../store/deckStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Deck = ({\n  deck,\n  onUpgrade\n}) => {\n  _s();\n  const {\n    removeCardFromDeck,\n    addCardToDeck\n  } = useDeckStore();\n  const [selectedCards, setSelectedCards] = useState([]);\n  const tierInfo = DECK_TIERS[deck.tier];\n  const capacityPercentage = deck.cards.length / tierInfo.capacity * 100;\n  const handleCardSelect = cardId => {\n    setSelectedCards(prev => {\n      if (prev.includes(cardId)) {\n        return prev.filter(id => id !== cardId);\n      }\n      if (prev.length >= 3) {\n        return prev;\n      }\n      return [...prev, cardId];\n    });\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    const cardData = e.dataTransfer.getData('card');\n    if (!cardData) return;\n    const card = JSON.parse(cardData);\n\n    // Check if the card level is allowed in this deck\n    const allowedLevels = getAllowedCardLevels(deck.tier);\n    if (!allowedLevels.includes(card.level)) {\n      console.warn(`Card level ${card.level} not allowed in ${deck.tier} deck`);\n      return;\n    }\n\n    // Check if deck is full\n    if (deck.cards.length >= tierInfo.capacity) {\n      console.warn('Deck is full');\n      return;\n    }\n    addCardToDeck(deck.id, card);\n  };\n  const handleDragStart = (e, card) => {\n    e.dataTransfer.setData('card', JSON.stringify(card));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-xl shadow-lg p-6\",\n    onDragOver: handleDragOver,\n    onDrop: handleDrop,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-2xl font-bold\",\n          children: deck.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-gray-600 capitalize\",\n          children: [deck.tier, \" Deck\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm text-gray-500\",\n          children: [deck.cards.length, \" / \", tierInfo.capacity, \" cards\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-32 h-2 bg-gray-200 rounded-full mt-1\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"h-full bg-blue-500 rounded-full\",\n            style: {\n              width: `${capacityPercentage}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\",\n      children: deck.cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        isDraggable: !deck.isArchived,\n        isSelected: selectedCards.includes(card.id),\n        onSelect: () => !deck.isArchived && handleCardSelect(card.id),\n        onClick: () => !deck.isArchived && removeCardFromDeck(deck.id, card.id),\n        onDragStart: e => handleDragStart(e, card)\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), !deck.isArchived && deck.cards.length >= tierInfo.capacity && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 p-4 bg-yellow-50 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-yellow-800\",\n        children: [\"Deck is full! \", onUpgrade && 'Consider upgrading to store more cards.']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), onUpgrade && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onUpgrade,\n        className: \"mt-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors\",\n        children: \"Upgrade Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to get allowed card levels for a deck tier\n_s(Deck, \"zIhqnoTrzmI5a0Zn/SKhkTOWX2o=\", false, function () {\n  return [useDeckStore];\n});\n_c = Deck;\nconst getAllowedCardLevels = tier => {\n  switch (tier) {\n    case 'starter':\n      return ['purple'];\n    case 'student':\n      return ['purple', 'yellow'];\n    case 'scholars':\n      return ['purple', 'yellow', 'red'];\n    case 'master':\n      return ['red'];\n    default:\n      return ['purple'];\n  }\n};\nvar _c;\n$RefreshReg$(_c, \"Deck\");","map":{"version":3,"names":["React","useState","DECK_TIERS","Card","useDeckStore","jsxDEV","_jsxDEV","Deck","deck","onUpgrade","_s","removeCardFromDeck","addCardToDeck","selectedCards","setSelectedCards","tierInfo","tier","capacityPercentage","cards","length","capacity","handleCardSelect","cardId","prev","includes","filter","id","handleDragOver","e","preventDefault","handleDrop","cardData","dataTransfer","getData","card","JSON","parse","allowedLevels","getAllowedCardLevels","level","console","warn","handleDragStart","setData","stringify","className","onDragOver","onDrop","children","name","fileName","_jsxFileName","lineNumber","columnNumber","style","width","map","isDraggable","isArchived","isSelected","onSelect","onClick","onDragStart","_c","$RefreshReg$"],"sources":["C:/Users/mrluf/Desktop/deck cards/src/components/Deck.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Deck as DeckType, DECK_TIERS, Card as CardType } from '../types';\nimport { Card } from './Card';\nimport { useDeckStore } from '../store/deckStore';\n\ninterface DeckProps {\n  deck: DeckType;\n  onUpgrade?: () => void;\n}\n\nexport const Deck: React.FC<DeckProps> = ({ deck, onUpgrade }) => {\n  const { removeCardFromDeck, addCardToDeck } = useDeckStore();\n  const [selectedCards, setSelectedCards] = useState<string[]>([]);\n  const tierInfo = DECK_TIERS[deck.tier];\n  const capacityPercentage = (deck.cards.length / tierInfo.capacity) * 100;\n\n  const handleCardSelect = (cardId: string) => {\n    setSelectedCards(prev => {\n      if (prev.includes(cardId)) {\n        return prev.filter(id => id !== cardId);\n      }\n      if (prev.length >= 3) {\n        return prev;\n      }\n      return [...prev, cardId];\n    });\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    const cardData = e.dataTransfer.getData('card');\n    if (!cardData) return;\n\n    const card: CardType = JSON.parse(cardData);\n    \n    // Check if the card level is allowed in this deck\n    const allowedLevels = getAllowedCardLevels(deck.tier);\n    if (!allowedLevels.includes(card.level)) {\n      console.warn(`Card level ${card.level} not allowed in ${deck.tier} deck`);\n      return;\n    }\n\n    // Check if deck is full\n    if (deck.cards.length >= tierInfo.capacity) {\n      console.warn('Deck is full');\n      return;\n    }\n\n    addCardToDeck(deck.id, card);\n  };\n\n  const handleDragStart = (e: React.DragEvent, card: CardType) => {\n    e.dataTransfer.setData('card', JSON.stringify(card));\n  };\n\n  return (\n    <div \n      className=\"bg-white rounded-xl shadow-lg p-6\"\n      onDragOver={handleDragOver}\n      onDrop={handleDrop}\n    >\n      <div className=\"flex justify-between items-center mb-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">{deck.name}</h2>\n          <p className=\"text-gray-600 capitalize\">{deck.tier} Deck</p>\n        </div>\n        <div className=\"text-right\">\n          <p className=\"text-sm text-gray-500\">\n            {deck.cards.length} / {tierInfo.capacity} cards\n          </p>\n          <div className=\"w-32 h-2 bg-gray-200 rounded-full mt-1\">\n            <div\n              className=\"h-full bg-blue-500 rounded-full\"\n              style={{ width: `${capacityPercentage}%` }}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n        {deck.cards.map((card) => (\n          <Card\n            key={card.id}\n            card={card}\n            isDraggable={!deck.isArchived}\n            isSelected={selectedCards.includes(card.id)}\n            onSelect={() => !deck.isArchived && handleCardSelect(card.id)}\n            onClick={() => !deck.isArchived && removeCardFromDeck(deck.id, card.id)}\n            onDragStart={(e) => handleDragStart(e, card)}\n          />\n        ))}\n      </div>\n\n      {!deck.isArchived && deck.cards.length >= tierInfo.capacity && (\n        <div className=\"mt-4 p-4 bg-yellow-50 rounded-lg\">\n          <p className=\"text-yellow-800\">\n            Deck is full! {onUpgrade && 'Consider upgrading to store more cards.'}\n          </p>\n          {onUpgrade && (\n            <button\n              onClick={onUpgrade}\n              className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors\"\n            >\n              Upgrade Deck\n            </button>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Helper function to get allowed card levels for a deck tier\nconst getAllowedCardLevels = (tier: DeckType['tier']): CardType['level'][] => {\n  switch (tier) {\n    case 'starter':\n      return ['purple'];\n    case 'student':\n      return ['purple', 'yellow'];\n    case 'scholars':\n      return ['purple', 'yellow', 'red'];\n    case 'master':\n      return ['red'];\n    default:\n      return ['purple'];\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}