{"ast":null,"code":"import { create } from 'zustand';\n// Sample cards for different categories\nconst mathCards = [\n// Purple cards\n{\n  id: 'm1',\n  name: 'Basic Math',\n  category: 'Mathematics',\n  level: 'purple',\n  dateEarned: new Date('2024-01-15'),\n  prerequisites: [],\n  description: 'Mastered basic arithmetic operations'\n}, {\n  id: 'm2',\n  name: 'Number Theory Basics',\n  category: 'Mathematics',\n  level: 'purple',\n  dateEarned: new Date('2024-01-20'),\n  prerequisites: [],\n  description: 'Understanding of prime numbers and factors'\n}, {\n  id: 'm3',\n  name: 'Geometry Fundamentals',\n  category: 'Mathematics',\n  level: 'purple',\n  dateEarned: new Date('2024-01-25'),\n  prerequisites: [],\n  description: 'Mastered basic geometric concepts'\n},\n// Yellow cards\n{\n  id: 'm4',\n  name: 'Algebra Basics',\n  category: 'Mathematics',\n  level: 'yellow',\n  dateEarned: new Date('2024-02-01'),\n  prerequisites: ['m1'],\n  description: 'Understanding of basic algebraic concepts'\n}, {\n  id: 'm5',\n  name: 'Trigonometry',\n  category: 'Mathematics',\n  level: 'yellow',\n  dateEarned: new Date('2024-02-05'),\n  prerequisites: ['m3'],\n  description: 'Mastered trigonometric functions'\n}, {\n  id: 'm6',\n  name: 'Statistics Basics',\n  category: 'Mathematics',\n  level: 'yellow',\n  dateEarned: new Date('2024-02-10'),\n  prerequisites: ['m2'],\n  description: 'Understanding of basic statistical concepts'\n},\n// Red cards\n{\n  id: 'm7',\n  name: 'Calculus Fundamentals',\n  category: 'Mathematics',\n  level: 'red',\n  dateEarned: new Date('2024-03-01'),\n  prerequisites: ['m4'],\n  description: 'Mastered differential and integral calculus'\n}, {\n  id: 'm8',\n  name: 'Linear Algebra',\n  category: 'Mathematics',\n  level: 'red',\n  dateEarned: new Date('2024-03-05'),\n  prerequisites: ['m4'],\n  description: 'Understanding of vector spaces and matrices'\n}, {\n  id: 'm9',\n  name: 'Differential Equations',\n  category: 'Mathematics',\n  level: 'red',\n  dateEarned: new Date('2024-03-10'),\n  prerequisites: ['m7'],\n  description: 'Mastered solving differential equations'\n}];\nconst programmingCards = [\n// Purple cards\n{\n  id: 'p1',\n  name: 'HTML & CSS Basics',\n  category: 'Programming',\n  level: 'purple',\n  dateEarned: new Date('2024-01-10'),\n  prerequisites: [],\n  description: 'Understanding of web page structure and styling'\n}, {\n  id: 'p2',\n  name: 'Git Fundamentals',\n  category: 'Programming',\n  level: 'purple',\n  dateEarned: new Date('2024-01-15'),\n  prerequisites: [],\n  description: 'Mastered version control basics'\n}, {\n  id: 'p3',\n  name: 'Command Line Basics',\n  category: 'Programming',\n  level: 'purple',\n  dateEarned: new Date('2024-01-20'),\n  prerequisites: [],\n  description: 'Understanding of terminal operations'\n},\n// Yellow cards\n{\n  id: 'p4',\n  name: 'JavaScript Fundamentals',\n  category: 'Programming',\n  level: 'yellow',\n  dateEarned: new Date('2024-02-15'),\n  prerequisites: ['p1'],\n  description: 'Mastered JavaScript programming basics'\n}, {\n  id: 'p5',\n  name: 'Database Basics',\n  category: 'Programming',\n  level: 'yellow',\n  dateEarned: new Date('2024-02-20'),\n  prerequisites: ['p3'],\n  description: 'Understanding of SQL and NoSQL databases'\n}, {\n  id: 'p6',\n  name: 'API Development',\n  category: 'Programming',\n  level: 'yellow',\n  dateEarned: new Date('2024-02-25'),\n  prerequisites: ['p4'],\n  description: 'Mastered RESTful API design'\n},\n// Red cards\n{\n  id: 'p7',\n  name: 'React Development',\n  category: 'Programming',\n  level: 'red',\n  dateEarned: new Date('2024-03-10'),\n  prerequisites: ['p4'],\n  description: 'Expert in React application development'\n}, {\n  id: 'p8',\n  name: 'System Design',\n  category: 'Programming',\n  level: 'red',\n  dateEarned: new Date('2024-03-15'),\n  prerequisites: ['p6'],\n  description: 'Mastered scalable system architecture'\n}, {\n  id: 'p9',\n  name: 'DevOps Practices',\n  category: 'Programming',\n  level: 'red',\n  dateEarned: new Date('2024-03-20'),\n  prerequisites: ['p2', 'p5'],\n  description: 'Expert in CI/CD and deployment'\n}];\nconst languageCards = [\n// Purple cards\n{\n  id: 'l1',\n  name: 'Basic Vocabulary',\n  category: 'Languages',\n  level: 'purple',\n  dateEarned: new Date('2024-01-05'),\n  prerequisites: [],\n  description: 'Mastered 1000 essential words'\n}, {\n  id: 'l2',\n  name: 'Pronunciation Basics',\n  category: 'Languages',\n  level: 'purple',\n  dateEarned: new Date('2024-01-10'),\n  prerequisites: [],\n  description: 'Understanding of basic phonetics'\n}, {\n  id: 'l3',\n  name: 'Simple Conversations',\n  category: 'Languages',\n  level: 'purple',\n  dateEarned: new Date('2024-01-15'),\n  prerequisites: [],\n  description: 'Mastered basic daily conversations'\n},\n// Yellow cards\n{\n  id: 'l4',\n  name: 'Grammar Mastery',\n  category: 'Languages',\n  level: 'yellow',\n  dateEarned: new Date('2024-02-20'),\n  prerequisites: ['l1'],\n  description: 'Understanding of complex grammar structures'\n}, {\n  id: 'l5',\n  name: 'Writing Skills',\n  category: 'Languages',\n  level: 'yellow',\n  dateEarned: new Date('2024-02-25'),\n  prerequisites: ['l4'],\n  description: 'Mastered formal writing techniques'\n}, {\n  id: 'l6',\n  name: 'Reading Comprehension',\n  category: 'Languages',\n  level: 'yellow',\n  dateEarned: new Date('2024-03-01'),\n  prerequisites: ['l1', 'l4'],\n  description: 'Understanding of complex texts'\n},\n// Red cards\n{\n  id: 'l7',\n  name: 'Fluency Achievement',\n  category: 'Languages',\n  level: 'red',\n  dateEarned: new Date('2024-03-15'),\n  prerequisites: ['l4'],\n  description: 'Achieved conversational fluency'\n}, {\n  id: 'l8',\n  name: 'Cultural Understanding',\n  category: 'Languages',\n  level: 'red',\n  dateEarned: new Date('2024-03-20'),\n  prerequisites: ['l7'],\n  description: 'Deep understanding of cultural context'\n}, {\n  id: 'l9',\n  name: 'Professional Proficiency',\n  category: 'Languages',\n  level: 'red',\n  dateEarned: new Date('2024-03-25'),\n  prerequisites: ['l5', 'l7'],\n  description: 'Mastered professional communication'\n}];\nconst scienceCards = [\n// Purple cards\n{\n  id: 's1',\n  name: 'Basic Physics',\n  category: 'Science',\n  level: 'purple',\n  dateEarned: new Date('2024-01-20'),\n  prerequisites: [],\n  description: 'Understanding of fundamental physics concepts'\n}, {\n  id: 's2',\n  name: 'Scientific Method',\n  category: 'Science',\n  level: 'purple',\n  dateEarned: new Date('2024-01-25'),\n  prerequisites: [],\n  description: 'Mastered research methodology'\n}, {\n  id: 's3',\n  name: 'Basic Chemistry',\n  category: 'Science',\n  level: 'purple',\n  dateEarned: new Date('2024-01-30'),\n  prerequisites: [],\n  description: 'Understanding of chemical elements'\n},\n// Yellow cards\n{\n  id: 's4',\n  name: 'Organic Chemistry',\n  category: 'Science',\n  level: 'yellow',\n  dateEarned: new Date('2024-02-25'),\n  prerequisites: ['s3'],\n  description: 'Mastered organic compounds'\n}, {\n  id: 's5',\n  name: 'Electromagnetism',\n  category: 'Science',\n  level: 'yellow',\n  dateEarned: new Date('2024-03-01'),\n  prerequisites: ['s1'],\n  description: 'Understanding of electromagnetic fields'\n}, {\n  id: 's6',\n  name: 'Cell Biology',\n  category: 'Science',\n  level: 'yellow',\n  dateEarned: new Date('2024-03-05'),\n  prerequisites: ['s2'],\n  description: 'Mastered cellular structures'\n},\n// Red cards\n{\n  id: 's7',\n  name: 'Quantum Physics',\n  category: 'Science',\n  level: 'red',\n  dateEarned: new Date('2024-03-20'),\n  prerequisites: ['s5'],\n  description: 'Understanding of quantum mechanics'\n}, {\n  id: 's8',\n  name: 'Biochemistry',\n  category: 'Science',\n  level: 'red',\n  dateEarned: new Date('2024-03-25'),\n  prerequisites: ['s4', 's6'],\n  description: 'Mastered biochemical processes'\n}, {\n  id: 's9',\n  name: 'Astrophysics',\n  category: 'Science',\n  level: 'red',\n  dateEarned: new Date('2024-03-30'),\n  prerequisites: ['s7'],\n  description: 'Understanding of cosmic phenomena'\n}];\n\n// Sample decks\nconst sampleDecks = [{\n  id: 'd1',\n  name: 'Math Mastery',\n  tier: 'starter',\n  capacity: 10,\n  cards: mathCards,\n  isArchived: false\n}, {\n  id: 'd2',\n  name: 'Programming Journey',\n  tier: 'student',\n  capacity: 25,\n  cards: programmingCards,\n  isArchived: false\n}, {\n  id: 'd3',\n  name: 'Language Learning',\n  tier: 'scholars',\n  capacity: 50,\n  cards: languageCards,\n  isArchived: false\n}, {\n  id: 'd4',\n  name: 'Science Explorer',\n  tier: 'master',\n  capacity: 100,\n  cards: scienceCards,\n  isArchived: false\n}, {\n  id: 'archived',\n  name: 'Archived Cards',\n  tier: 'master',\n  capacity: 1000,\n  cards: [],\n  isArchived: true\n}];\n// Helper function to get allowed card levels for a deck tier\nconst getAllowedCardLevels = tier => {\n  switch (tier) {\n    case 'starter':\n      return ['purple'];\n    case 'student':\n      return ['purple', 'yellow'];\n    case 'scholars':\n      return ['purple', 'yellow', 'red'];\n    case 'master':\n      return ['red'];\n    default:\n      return ['purple'];\n  }\n};\nexport const useDeckStore = create(set => ({\n  decks: sampleDecks,\n  selectedDeck: null,\n  setSelectedDeck: deckId => set({\n    selectedDeck: deckId\n  }),\n  addCardToDeck: (deckId, card) => set(state => ({\n    decks: state.decks.map(deck => {\n      if (deck.id === deckId) {\n        // Check if the deck has capacity\n        if (deck.cards.length >= deck.capacity) return deck;\n\n        // Check if the card is already in the deck\n        if (deck.cards.some(c => c.id === card.id)) return deck;\n        return {\n          ...deck,\n          cards: [...deck.cards, card]\n        };\n      }\n      return deck;\n    })\n  })),\n  archiveCard: card => set(state => ({\n    decks: state.decks.map(deck => {\n      // Remove the card from all decks\n      const updatedCards = deck.cards.filter(c => c.id !== card.id);\n\n      // If this is the archived deck, add the card with isArchived flag\n      if (deck.id === 'archived') {\n        return {\n          ...deck,\n          cards: [...updatedCards, {\n            ...card,\n            isArchived: true\n          }]\n        };\n      }\n      return {\n        ...deck,\n        cards: updatedCards\n      };\n    })\n  }))\n}));","map":{"version":3,"names":["create","mathCards","id","name","category","level","dateEarned","Date","prerequisites","description","programmingCards","languageCards","scienceCards","sampleDecks","tier","capacity","cards","isArchived","getAllowedCardLevels","useDeckStore","set","decks","selectedDeck","setSelectedDeck","deckId","addCardToDeck","card","state","map","deck","length","some","c","archiveCard","updatedCards","filter"],"sources":["C:/Users/mrluf/Desktop/deck cards/src/store/deckStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { Card, Deck, DeckTier } from '../types';\r\n\r\n// Sample cards for different categories\r\nconst mathCards: Card[] = [\r\n  // Purple cards\r\n  {\r\n    id: 'm1',\r\n    name: 'Basic Math',\r\n    category: 'Mathematics',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-15'),\r\n    prerequisites: [],\r\n    description: 'Mastered basic arithmetic operations',\r\n  },\r\n  {\r\n    id: 'm2',\r\n    name: 'Number Theory Basics',\r\n    category: 'Mathematics',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-20'),\r\n    prerequisites: [],\r\n    description: 'Understanding of prime numbers and factors',\r\n  },\r\n  {\r\n    id: 'm3',\r\n    name: 'Geometry Fundamentals',\r\n    category: 'Mathematics',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-25'),\r\n    prerequisites: [],\r\n    description: 'Mastered basic geometric concepts',\r\n  },\r\n  // Yellow cards\r\n  {\r\n    id: 'm4',\r\n    name: 'Algebra Basics',\r\n    category: 'Mathematics',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-02-01'),\r\n    prerequisites: ['m1'],\r\n    description: 'Understanding of basic algebraic concepts',\r\n  },\r\n  {\r\n    id: 'm5',\r\n    name: 'Trigonometry',\r\n    category: 'Mathematics',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-02-05'),\r\n    prerequisites: ['m3'],\r\n    description: 'Mastered trigonometric functions',\r\n  },\r\n  {\r\n    id: 'm6',\r\n    name: 'Statistics Basics',\r\n    category: 'Mathematics',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-02-10'),\r\n    prerequisites: ['m2'],\r\n    description: 'Understanding of basic statistical concepts',\r\n  },\r\n  // Red cards\r\n  {\r\n    id: 'm7',\r\n    name: 'Calculus Fundamentals',\r\n    category: 'Mathematics',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-01'),\r\n    prerequisites: ['m4'],\r\n    description: 'Mastered differential and integral calculus',\r\n  },\r\n  {\r\n    id: 'm8',\r\n    name: 'Linear Algebra',\r\n    category: 'Mathematics',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-05'),\r\n    prerequisites: ['m4'],\r\n    description: 'Understanding of vector spaces and matrices',\r\n  },\r\n  {\r\n    id: 'm9',\r\n    name: 'Differential Equations',\r\n    category: 'Mathematics',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-10'),\r\n    prerequisites: ['m7'],\r\n    description: 'Mastered solving differential equations',\r\n  },\r\n];\r\n\r\nconst programmingCards: Card[] = [\r\n  // Purple cards\r\n  {\r\n    id: 'p1',\r\n    name: 'HTML & CSS Basics',\r\n    category: 'Programming',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-10'),\r\n    prerequisites: [],\r\n    description: 'Understanding of web page structure and styling',\r\n  },\r\n  {\r\n    id: 'p2',\r\n    name: 'Git Fundamentals',\r\n    category: 'Programming',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-15'),\r\n    prerequisites: [],\r\n    description: 'Mastered version control basics',\r\n  },\r\n  {\r\n    id: 'p3',\r\n    name: 'Command Line Basics',\r\n    category: 'Programming',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-20'),\r\n    prerequisites: [],\r\n    description: 'Understanding of terminal operations',\r\n  },\r\n  // Yellow cards\r\n  {\r\n    id: 'p4',\r\n    name: 'JavaScript Fundamentals',\r\n    category: 'Programming',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-02-15'),\r\n    prerequisites: ['p1'],\r\n    description: 'Mastered JavaScript programming basics',\r\n  },\r\n  {\r\n    id: 'p5',\r\n    name: 'Database Basics',\r\n    category: 'Programming',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-02-20'),\r\n    prerequisites: ['p3'],\r\n    description: 'Understanding of SQL and NoSQL databases',\r\n  },\r\n  {\r\n    id: 'p6',\r\n    name: 'API Development',\r\n    category: 'Programming',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-02-25'),\r\n    prerequisites: ['p4'],\r\n    description: 'Mastered RESTful API design',\r\n  },\r\n  // Red cards\r\n  {\r\n    id: 'p7',\r\n    name: 'React Development',\r\n    category: 'Programming',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-10'),\r\n    prerequisites: ['p4'],\r\n    description: 'Expert in React application development',\r\n  },\r\n  {\r\n    id: 'p8',\r\n    name: 'System Design',\r\n    category: 'Programming',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-15'),\r\n    prerequisites: ['p6'],\r\n    description: 'Mastered scalable system architecture',\r\n  },\r\n  {\r\n    id: 'p9',\r\n    name: 'DevOps Practices',\r\n    category: 'Programming',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-20'),\r\n    prerequisites: ['p2', 'p5'],\r\n    description: 'Expert in CI/CD and deployment',\r\n  },\r\n];\r\n\r\nconst languageCards: Card[] = [\r\n  // Purple cards\r\n  {\r\n    id: 'l1',\r\n    name: 'Basic Vocabulary',\r\n    category: 'Languages',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-05'),\r\n    prerequisites: [],\r\n    description: 'Mastered 1000 essential words',\r\n  },\r\n  {\r\n    id: 'l2',\r\n    name: 'Pronunciation Basics',\r\n    category: 'Languages',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-10'),\r\n    prerequisites: [],\r\n    description: 'Understanding of basic phonetics',\r\n  },\r\n  {\r\n    id: 'l3',\r\n    name: 'Simple Conversations',\r\n    category: 'Languages',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-15'),\r\n    prerequisites: [],\r\n    description: 'Mastered basic daily conversations',\r\n  },\r\n  // Yellow cards\r\n  {\r\n    id: 'l4',\r\n    name: 'Grammar Mastery',\r\n    category: 'Languages',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-02-20'),\r\n    prerequisites: ['l1'],\r\n    description: 'Understanding of complex grammar structures',\r\n  },\r\n  {\r\n    id: 'l5',\r\n    name: 'Writing Skills',\r\n    category: 'Languages',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-02-25'),\r\n    prerequisites: ['l4'],\r\n    description: 'Mastered formal writing techniques',\r\n  },\r\n  {\r\n    id: 'l6',\r\n    name: 'Reading Comprehension',\r\n    category: 'Languages',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-03-01'),\r\n    prerequisites: ['l1', 'l4'],\r\n    description: 'Understanding of complex texts',\r\n  },\r\n  // Red cards\r\n  {\r\n    id: 'l7',\r\n    name: 'Fluency Achievement',\r\n    category: 'Languages',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-15'),\r\n    prerequisites: ['l4'],\r\n    description: 'Achieved conversational fluency',\r\n  },\r\n  {\r\n    id: 'l8',\r\n    name: 'Cultural Understanding',\r\n    category: 'Languages',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-20'),\r\n    prerequisites: ['l7'],\r\n    description: 'Deep understanding of cultural context',\r\n  },\r\n  {\r\n    id: 'l9',\r\n    name: 'Professional Proficiency',\r\n    category: 'Languages',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-25'),\r\n    prerequisites: ['l5', 'l7'],\r\n    description: 'Mastered professional communication',\r\n  },\r\n];\r\n\r\nconst scienceCards: Card[] = [\r\n  // Purple cards\r\n  {\r\n    id: 's1',\r\n    name: 'Basic Physics',\r\n    category: 'Science',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-20'),\r\n    prerequisites: [],\r\n    description: 'Understanding of fundamental physics concepts',\r\n  },\r\n  {\r\n    id: 's2',\r\n    name: 'Scientific Method',\r\n    category: 'Science',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-25'),\r\n    prerequisites: [],\r\n    description: 'Mastered research methodology',\r\n  },\r\n  {\r\n    id: 's3',\r\n    name: 'Basic Chemistry',\r\n    category: 'Science',\r\n    level: 'purple',\r\n    dateEarned: new Date('2024-01-30'),\r\n    prerequisites: [],\r\n    description: 'Understanding of chemical elements',\r\n  },\r\n  // Yellow cards\r\n  {\r\n    id: 's4',\r\n    name: 'Organic Chemistry',\r\n    category: 'Science',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-02-25'),\r\n    prerequisites: ['s3'],\r\n    description: 'Mastered organic compounds',\r\n  },\r\n  {\r\n    id: 's5',\r\n    name: 'Electromagnetism',\r\n    category: 'Science',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-03-01'),\r\n    prerequisites: ['s1'],\r\n    description: 'Understanding of electromagnetic fields',\r\n  },\r\n  {\r\n    id: 's6',\r\n    name: 'Cell Biology',\r\n    category: 'Science',\r\n    level: 'yellow',\r\n    dateEarned: new Date('2024-03-05'),\r\n    prerequisites: ['s2'],\r\n    description: 'Mastered cellular structures',\r\n  },\r\n  // Red cards\r\n  {\r\n    id: 's7',\r\n    name: 'Quantum Physics',\r\n    category: 'Science',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-20'),\r\n    prerequisites: ['s5'],\r\n    description: 'Understanding of quantum mechanics',\r\n  },\r\n  {\r\n    id: 's8',\r\n    name: 'Biochemistry',\r\n    category: 'Science',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-25'),\r\n    prerequisites: ['s4', 's6'],\r\n    description: 'Mastered biochemical processes',\r\n  },\r\n  {\r\n    id: 's9',\r\n    name: 'Astrophysics',\r\n    category: 'Science',\r\n    level: 'red',\r\n    dateEarned: new Date('2024-03-30'),\r\n    prerequisites: ['s7'],\r\n    description: 'Understanding of cosmic phenomena',\r\n  },\r\n];\r\n\r\n// Sample decks\r\nconst sampleDecks: Deck[] = [\r\n  {\r\n    id: 'd1',\r\n    name: 'Math Mastery',\r\n    tier: 'starter',\r\n    capacity: 10,\r\n    cards: mathCards,\r\n    isArchived: false,\r\n  },\r\n  {\r\n    id: 'd2',\r\n    name: 'Programming Journey',\r\n    tier: 'student',\r\n    capacity: 25,\r\n    cards: programmingCards,\r\n    isArchived: false,\r\n  },\r\n  {\r\n    id: 'd3',\r\n    name: 'Language Learning',\r\n    tier: 'scholars',\r\n    capacity: 50,\r\n    cards: languageCards,\r\n    isArchived: false,\r\n  },\r\n  {\r\n    id: 'd4',\r\n    name: 'Science Explorer',\r\n    tier: 'master',\r\n    capacity: 100,\r\n    cards: scienceCards,\r\n    isArchived: false,\r\n  },\r\n  {\r\n    id: 'archived',\r\n    name: 'Archived Cards',\r\n    tier: 'master',\r\n    capacity: 1000,\r\n    cards: [],\r\n    isArchived: true,\r\n  },\r\n];\r\n\r\ninterface DeckStore {\r\n  decks: Deck[];\r\n  selectedDeck: string | null;\r\n  setSelectedDeck: (deckId: string) => void;\r\n  addCardToDeck: (deckId: string, card: Card) => void;\r\n  archiveCard: (card: Card) => void;\r\n}\r\n\r\n// Helper function to get allowed card levels for a deck tier\r\nconst getAllowedCardLevels = (tier: DeckTier): Card['level'][] => {\r\n  switch (tier) {\r\n    case 'starter':\r\n      return ['purple'];\r\n    case 'student':\r\n      return ['purple', 'yellow'];\r\n    case 'scholars':\r\n      return ['purple', 'yellow', 'red'];\r\n    case 'master':\r\n      return ['red'];\r\n    default:\r\n      return ['purple'];\r\n  }\r\n};\r\n\r\nexport const useDeckStore = create<DeckStore>((set) => ({\r\n  decks: sampleDecks,\r\n  selectedDeck: null,\r\n  setSelectedDeck: (deckId) => set({ selectedDeck: deckId }),\r\n  addCardToDeck: (deckId, card) => set((state) => ({\r\n    decks: state.decks.map(deck => {\r\n      if (deck.id === deckId) {\r\n        // Check if the deck has capacity\r\n        if (deck.cards.length >= deck.capacity) return deck;\r\n\r\n        // Check if the card is already in the deck\r\n        if (deck.cards.some(c => c.id === card.id)) return deck;\r\n\r\n        return {\r\n          ...deck,\r\n          cards: [...deck.cards, card]\r\n        };\r\n      }\r\n      return deck;\r\n    })\r\n  })),\r\n  archiveCard: (card) => set((state) => ({\r\n    decks: state.decks.map(deck => {\r\n      // Remove the card from all decks\r\n      const updatedCards = deck.cards.filter(c => c.id !== card.id);\r\n\r\n      // If this is the archived deck, add the card with isArchived flag\r\n      if (deck.id === 'archived') {\r\n        return {\r\n          ...deck,\r\n          cards: [...updatedCards, { ...card, isArchived: true }]\r\n        };\r\n      }\r\n\r\n      return {\r\n        ...deck,\r\n        cards: updatedCards\r\n      };\r\n    })\r\n  }))\r\n}));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}