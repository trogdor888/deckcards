{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrluf\\\\Desktop\\\\deck cards\\\\src\\\\components\\\\MergeBin.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Card } from './Card';\nimport { useDeckStore } from '../store/deckStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MergeBin = () => {\n  _s();\n  const [cardsToMerge, setCardsToMerge] = useState([]);\n  const [mergedCard, setMergedCard] = useState(null);\n  const {\n    mergeCards\n  } = useDeckStore();\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n  const handleDrop = e => {\n    e.preventDefault();\n    const cardData = e.dataTransfer.getData('card');\n    if (!cardData) return;\n    const card = JSON.parse(cardData);\n\n    // Check if card is already in the bin\n    if (cardsToMerge.some(c => c.id === card.id)) return;\n\n    // Check if we already have 3 cards\n    if (cardsToMerge.length >= 3) return;\n\n    // Check if the card level matches existing cards\n    if (cardsToMerge.length > 0 && cardsToMerge[0].level !== card.level) return;\n    setCardsToMerge(prev => [...prev, card]);\n  };\n  const handleMerge = () => {\n    if (cardsToMerge.length !== 3) return;\n    const cardIds = cardsToMerge.map(card => card.id);\n    const firstCard = cardsToMerge[0];\n\n    // Determine the next level\n    const nextLevel = firstCard.level === 'purple' ? 'yellow' : firstCard.level === 'yellow' ? 'red' : 'red';\n\n    // Create the merged card\n    const newMergedCard = {\n      id: `merged-${Date.now()}`,\n      name: `${firstCard.name} Mastery`,\n      category: firstCard.category,\n      level: nextLevel,\n      dateEarned: new Date(),\n      prerequisites: cardIds,\n      description: `Mastered advanced ${firstCard.category} concepts`\n    };\n    setMergedCard(newMergedCard);\n    setCardsToMerge([]);\n  };\n  const handleRemoveCard = cardId => {\n    setCardsToMerge(prev => prev.filter(card => card.id !== cardId));\n  };\n  const handleDragStart = (e, card) => {\n    e.dataTransfer.setData('card', JSON.stringify(card));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed bottom-4 right-4 w-80 bg-white rounded-xl shadow-lg p-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-lg font-bold mb-4\",\n      children: \"Merge Bin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `min-h-[200px] border-2 border-dashed rounded-lg p-4 mb-4 ${cardsToMerge.length > 0 ? 'border-blue-500' : 'border-gray-300'}`,\n      onDragOver: handleDragOver,\n      onDrop: handleDrop,\n      children: [cardsToMerge.length === 0 && !mergedCard && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-500 text-center\",\n        children: \"Drag cards here to merge\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-1 gap-2\",\n        children: cardsToMerge.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative\",\n          children: /*#__PURE__*/_jsxDEV(Card, {\n            card: card,\n            onClick: () => handleRemoveCard(card.id),\n            isDraggable: true,\n            onDragStart: e => handleDragStart(e, card)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this)\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), mergedCard && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-sm font-semibold mb-2\",\n          children: \"Merged Card:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Card, {\n          card: mergedCard,\n          isDraggable: true,\n          onDragStart: e => handleDragStart(e, mergedCard)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), cardsToMerge.length === 3 && !mergedCard && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMerge,\n      className: \"w-full py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors\",\n      children: \"Merge Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(MergeBin, \"CZhGiWJp5r1IobG9jDO7iOqDNx0=\", false, function () {\n  return [useDeckStore];\n});\n_c = MergeBin;\nvar _c;\n$RefreshReg$(_c, \"MergeBin\");","map":{"version":3,"names":["React","useState","Card","useDeckStore","jsxDEV","_jsxDEV","MergeBin","_s","cardsToMerge","setCardsToMerge","mergedCard","setMergedCard","mergeCards","handleDragOver","e","preventDefault","handleDrop","cardData","dataTransfer","getData","card","JSON","parse","some","c","id","length","level","prev","handleMerge","cardIds","map","firstCard","nextLevel","newMergedCard","Date","now","name","category","dateEarned","prerequisites","description","handleRemoveCard","cardId","filter","handleDragStart","setData","stringify","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDragOver","onDrop","onClick","isDraggable","onDragStart","_c","$RefreshReg$"],"sources":["C:/Users/mrluf/Desktop/deck cards/src/components/MergeBin.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Card as CardType } from '../types';\r\nimport { Card } from './Card';\r\nimport { useDeckStore } from '../store/deckStore';\r\n\r\nexport const MergeBin: React.FC = () => {\r\n  const [cardsToMerge, setCardsToMerge] = useState<CardType[]>([]);\r\n  const [mergedCard, setMergedCard] = useState<CardType | null>(null);\r\n  const { mergeCards } = useDeckStore();\r\n\r\n  const handleDragOver = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleDrop = (e: React.DragEvent) => {\r\n    e.preventDefault();\r\n    const cardData = e.dataTransfer.getData('card');\r\n    if (!cardData) return;\r\n\r\n    const card: CardType = JSON.parse(cardData);\r\n    \r\n    // Check if card is already in the bin\r\n    if (cardsToMerge.some(c => c.id === card.id)) return;\r\n\r\n    // Check if we already have 3 cards\r\n    if (cardsToMerge.length >= 3) return;\r\n\r\n    // Check if the card level matches existing cards\r\n    if (cardsToMerge.length > 0 && cardsToMerge[0].level !== card.level) return;\r\n\r\n    setCardsToMerge(prev => [...prev, card]);\r\n  };\r\n\r\n  const handleMerge = () => {\r\n    if (cardsToMerge.length !== 3) return;\r\n\r\n    const cardIds = cardsToMerge.map(card => card.id);\r\n    const firstCard = cardsToMerge[0];\r\n    \r\n    // Determine the next level\r\n    const nextLevel: CardType['level'] = \r\n      firstCard.level === 'purple' ? 'yellow' :\r\n      firstCard.level === 'yellow' ? 'red' :\r\n      'red';\r\n\r\n    // Create the merged card\r\n    const newMergedCard: CardType = {\r\n      id: `merged-${Date.now()}`,\r\n      name: `${firstCard.name} Mastery`,\r\n      category: firstCard.category,\r\n      level: nextLevel,\r\n      dateEarned: new Date(),\r\n      prerequisites: cardIds,\r\n      description: `Mastered advanced ${firstCard.category} concepts`,\r\n    };\r\n\r\n    setMergedCard(newMergedCard);\r\n    setCardsToMerge([]);\r\n  };\r\n\r\n  const handleRemoveCard = (cardId: string) => {\r\n    setCardsToMerge(prev => prev.filter(card => card.id !== cardId));\r\n  };\r\n\r\n  const handleDragStart = (e: React.DragEvent, card: CardType) => {\r\n    e.dataTransfer.setData('card', JSON.stringify(card));\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed bottom-4 right-4 w-80 bg-white rounded-xl shadow-lg p-4\">\r\n      <h3 className=\"text-lg font-bold mb-4\">Merge Bin</h3>\r\n      \r\n      <div \r\n        className={`min-h-[200px] border-2 border-dashed rounded-lg p-4 mb-4 ${\r\n          cardsToMerge.length > 0 ? 'border-blue-500' : 'border-gray-300'\r\n        }`}\r\n        onDragOver={handleDragOver}\r\n        onDrop={handleDrop}\r\n      >\r\n        {cardsToMerge.length === 0 && !mergedCard && (\r\n          <p className=\"text-gray-500 text-center\">Drag cards here to merge</p>\r\n        )}\r\n        \r\n        <div className=\"grid grid-cols-1 gap-2\">\r\n          {cardsToMerge.map(card => (\r\n            <div key={card.id} className=\"relative\">\r\n              <Card\r\n                card={card}\r\n                onClick={() => handleRemoveCard(card.id)}\r\n                isDraggable={true}\r\n                onDragStart={(e) => handleDragStart(e, card)}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {mergedCard && (\r\n          <div className=\"mt-4\">\r\n            <p className=\"text-sm font-semibold mb-2\">Merged Card:</p>\r\n            <Card\r\n              card={mergedCard}\r\n              isDraggable={true}\r\n              onDragStart={(e) => handleDragStart(e, mergedCard)}\r\n            />\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {cardsToMerge.length === 3 && !mergedCard && (\r\n        <button\r\n          onClick={handleMerge}\r\n          className=\"w-full py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors\"\r\n        >\r\n          Merge Cards\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}