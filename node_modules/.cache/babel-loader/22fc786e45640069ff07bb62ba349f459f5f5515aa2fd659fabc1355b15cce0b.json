{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrluf\\\\Desktop\\\\deck cards\\\\src\\\\components\\\\InfiniteCanvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\n\n// Generate 100 sample cards with random Unsplash thumbnails\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cards = Array.from({\n  length: 100\n}, (_, i) => ({\n  id: i,\n  img: `https://source.unsplash.com/collection/1163637/200x200?sig=${i}`,\n  title: `Card ${i + 1}`\n}));\n\n// Declare the custom deck-card element for TypeScript\n\nexport default function InfiniteCanvas() {\n  _s();\n  const [offset, setOffset] = useState({\n    x: 0,\n    y: 0\n  });\n  const [dragging, setDragging] = useState(false);\n  const [start, setStart] = useState({\n    x: 0,\n    y: 0\n  });\n  function onMouseDown(e) {\n    setDragging(true);\n    setStart({\n      x: e.clientX - offset.x,\n      y: e.clientY - offset.y\n    });\n  }\n  function onMouseMove(e) {\n    if (!dragging) return;\n    setOffset({\n      x: e.clientX - start.x,\n      y: e.clientY - start.y\n    });\n  }\n  function onMouseUp() {\n    setDragging(false);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"InfiniteCanvas\",\n    onMouseDown: onMouseDown,\n    onMouseMove: onMouseMove,\n    onMouseUp: onMouseUp,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"CardGrid\",\n      style: {\n        transform: `translate(${offset.x}px, ${offset.y}px)`\n      },\n      children: cards.map(c => /*#__PURE__*/_jsxDEV(\"deck-card\", {\n        img: c.img,\n        title: c.title\n      }, c.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(InfiniteCanvas, \"zjGCJWQkRnKpvtARcTKQAde/a74=\");\n_c = InfiniteCanvas;\nvar _c;\n$RefreshReg$(_c, \"InfiniteCanvas\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","cards","Array","from","length","_","i","id","img","title","InfiniteCanvas","_s","offset","setOffset","x","y","dragging","setDragging","start","setStart","onMouseDown","e","clientX","clientY","onMouseMove","onMouseUp","className","children","style","transform","map","c","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/mrluf/Desktop/deck cards/src/components/InfiniteCanvas.tsx"],"sourcesContent":["import React, { useState, useRef } from \"react\";\r\n\r\n// Generate 100 sample cards with random Unsplash thumbnails\r\nconst cards = Array.from({ length: 100 }, (_, i) => ({\r\n  id: i,\r\n  img: `https://source.unsplash.com/collection/1163637/200x200?sig=${i}`,\r\n  title: `Card ${i + 1}`\r\n}));\r\n\r\n// Declare the custom deck-card element for TypeScript\r\ndeclare global {\r\n  namespace JSX {\r\n    interface IntrinsicElements {\r\n      'deck-card': React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement> & {\r\n        img?: string;\r\n        title?: string;\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\nexport default function InfiniteCanvas() {\r\n  const [offset, setOffset] = useState({ x: 0, y: 0 });\r\n  const [dragging, setDragging] = useState(false);\r\n  const [start, setStart] = useState({ x: 0, y: 0 });\r\n\r\n  function onMouseDown(e: React.MouseEvent) {\r\n    setDragging(true);\r\n    setStart({ x: e.clientX - offset.x, y: e.clientY - offset.y });\r\n  }\r\n\r\n  function onMouseMove(e: React.MouseEvent) {\r\n    if (!dragging) return;\r\n    setOffset({ x: e.clientX - start.x, y: e.clientY - start.y });\r\n  }\r\n\r\n  function onMouseUp() {\r\n    setDragging(false);\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"InfiniteCanvas\"\r\n      onMouseDown={onMouseDown}\r\n      onMouseMove={onMouseMove}\r\n      onMouseUp={onMouseUp}\r\n    >\r\n      <div\r\n        className=\"CardGrid\"\r\n        style={{ transform: `translate(${offset.x}px, ${offset.y}px)` }}\r\n      >\r\n        {cards.map(c => (\r\n          <deck-card key={c.id} img={c.img} title={c.title} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n} "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAgB,OAAO;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAAC;EAAEC,MAAM,EAAE;AAAI,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,MAAM;EACnDC,EAAE,EAAED,CAAC;EACLE,GAAG,EAAE,8DAA8DF,CAAC,EAAE;EACtEG,KAAK,EAAE,QAAQH,CAAC,GAAG,CAAC;AACtB,CAAC,CAAC,CAAC;;AAEH;;AAYA,eAAe,SAASI,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACvC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC;IAAEgB,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EACpD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC;IAAEgB,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAE,CAAC,CAAC;EAElD,SAASK,WAAWA,CAACC,CAAmB,EAAE;IACxCJ,WAAW,CAAC,IAAI,CAAC;IACjBE,QAAQ,CAAC;MAAEL,CAAC,EAAEO,CAAC,CAACC,OAAO,GAAGV,MAAM,CAACE,CAAC;MAAEC,CAAC,EAAEM,CAAC,CAACE,OAAO,GAAGX,MAAM,CAACG;IAAE,CAAC,CAAC;EAChE;EAEA,SAASS,WAAWA,CAACH,CAAmB,EAAE;IACxC,IAAI,CAACL,QAAQ,EAAE;IACfH,SAAS,CAAC;MAAEC,CAAC,EAAEO,CAAC,CAACC,OAAO,GAAGJ,KAAK,CAACJ,CAAC;MAAEC,CAAC,EAAEM,CAAC,CAACE,OAAO,GAAGL,KAAK,CAACH;IAAE,CAAC,CAAC;EAC/D;EAEA,SAASU,SAASA,CAAA,EAAG;IACnBR,WAAW,CAAC,KAAK,CAAC;EACpB;EAEA,oBACEjB,OAAA;IACE0B,SAAS,EAAC,gBAAgB;IAC1BN,WAAW,EAAEA,WAAY;IACzBI,WAAW,EAAEA,WAAY;IACzBC,SAAS,EAAEA,SAAU;IAAAE,QAAA,eAErB3B,OAAA;MACE0B,SAAS,EAAC,UAAU;MACpBE,KAAK,EAAE;QAAEC,SAAS,EAAE,aAAajB,MAAM,CAACE,CAAC,OAAOF,MAAM,CAACG,CAAC;MAAM,CAAE;MAAAY,QAAA,EAE/D1B,KAAK,CAAC6B,GAAG,CAACC,CAAC,iBACV/B,OAAA;QAAsBQ,GAAG,EAAEuB,CAAC,CAACvB,GAAI;QAACC,KAAK,EAAEsB,CAAC,CAACtB;MAAM,GAAjCsB,CAAC,CAACxB,EAAE;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA+B,CACpD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACxB,EAAA,CApCuBD,cAAc;AAAA0B,EAAA,GAAd1B,cAAc;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}