{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mrluf\\\\Desktop\\\\deck cards\\\\src\\\\components\\\\CardDetail.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CardDetail({\n  card,\n  onClose,\n  onNavigate,\n  relatedCards\n}) {\n  _s();\n  // 3D Camera system - camera position in 3D space\n  const [cameraPosition, setCameraPosition] = useState({\n    x: 0,\n    y: 0,\n    z: 0,\n    rotationY: 0,\n    rotationX: 0\n  });\n  const [dragStart, setDragStart] = useState({\n    x: 0,\n    y: 0\n  });\n  const [isDragging, setIsDragging] = useState(false);\n  const [dragOffset, setDragOffset] = useState(0);\n  const [isFlipped, setIsFlipped] = useState(false);\n  const containerRef = useRef(null);\n\n  // Initialize camera position to focus on clicked card on the globe\n  useEffect(() => {\n    const cardIndex = relatedCards.findIndex(c => c.id === card.id);\n    const targetIndex = cardIndex >= 0 ? cardIndex : 0;\n\n    // Calculate the target card's position on the globe's equator\n    const totalCards = relatedCards.length;\n    const globeRadius = 300;\n    const targetAngle = targetIndex / totalCards * 2 * Math.PI;\n    const cardX = Math.cos(targetAngle) * globeRadius;\n    const cardY = 0; // Card is on equator\n    const cardZ = Math.sin(targetAngle) * globeRadius;\n\n    // Position camera outside the globe, looking at the target card\n    const cameraDistance = globeRadius + 200; // Camera distance from globe center\n    const cameraX = Math.cos(targetAngle) * cameraDistance;\n    const cameraY = 100; // Slightly above equator for better view\n    const cameraZ = Math.sin(targetAngle) * cameraDistance;\n    setCameraPosition({\n      x: cameraX,\n      y: cameraY,\n      z: cameraZ,\n      rotationY: 0,\n      // Face toward globe center\n      rotationX: -10 // Look slightly down at the equator\n    });\n  }, [card.id, relatedCards]);\n\n  // Handle card flip for the card closest to camera\n  useEffect(() => {\n    setIsFlipped(true);\n    const timer = setTimeout(() => setIsFlipped(false), 600);\n    return () => clearTimeout(timer);\n  }, [cameraPosition.x]);\n  useEffect(() => {\n    const keyHandler = e => {\n      if (e.key === 'Escape') onClose();\n      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        // Move camera to nearest card in 3D space\n        const nearestCard = findNearestCard(e.key === 'ArrowLeft' ? 'left' : 'right');\n        if (nearestCard) {\n          setCameraPosition({\n            x: nearestCard.x3d,\n            y: nearestCard.y3d - 150,\n            // Position camera above the card\n            z: nearestCard.z3d + 300,\n            // Pull camera back for better view\n            rotationY: 0,\n            // Face forward\n            rotationX: -20 // Look slightly down at the card\n          });\n        }\n      }\n    };\n    document.addEventListener('keydown', keyHandler);\n    return () => document.removeEventListener('keydown', keyHandler);\n  }, [onClose, cameraPosition.x, relatedCards.length]);\n\n  // Handle click outside to close\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      onClose();\n    }\n  };\n\n  // Swipe/drag navigation\n  const handleMouseDown = e => {\n    setIsDragging(true);\n    setDragStart({\n      x: e.clientX,\n      y: e.clientY\n    });\n    setDragOffset(0);\n  };\n  const handleMouseMove = e => {\n    if (!isDragging) return;\n    const deltaX = e.clientX - dragStart.x;\n    // Apply some resistance to make dragging feel more natural\n    const dampedDelta = deltaX * 0.8;\n    setDragOffset(dampedDelta);\n  };\n  const handleMouseUp = () => {\n    if (!isDragging) return;\n    const threshold = 60;\n    const cardSpacing = 200;\n    const currentCardIndex = Math.round(cameraPosition.x / cardSpacing);\n\n    // Calculate if we should snap to next/previous card in 3D space\n    const shouldSnapToNext = dragOffset < -threshold && currentCardIndex < relatedCards.length - 1;\n    const shouldSnapToPrevious = dragOffset > threshold && currentCardIndex > 0;\n    if (shouldSnapToNext) {\n      // Move camera to nearest card in 3D space\n      const nearestCard = findNearestCard('right');\n      if (nearestCard) {\n        setCameraPosition({\n          x: nearestCard.x3d,\n          y: nearestCard.y3d - 150,\n          // Position camera above the card\n          z: nearestCard.z3d + 300,\n          // Pull camera back for better view\n          rotationY: 0,\n          // Face forward\n          rotationX: -20 // Look slightly down at the card\n        });\n      }\n    } else if (shouldSnapToPrevious) {\n      // Move camera to nearest card in 3D space\n      const nearestCard = findNearestCard('left');\n      if (nearestCard) {\n        setCameraPosition({\n          x: nearestCard.x3d,\n          y: nearestCard.y3d - 150,\n          // Position camera above the card\n          z: nearestCard.z3d + 300,\n          // Pull camera back for better view\n          rotationY: 0,\n          // Face forward\n          rotationX: -20 // Look slightly down at the card\n        });\n      }\n    }\n    setIsDragging(false);\n    setDragOffset(0);\n  };\n\n  // Touch events for mobile\n  const handleTouchStart = e => {\n    const touch = e.touches[0];\n    setIsDragging(true);\n    setDragStart({\n      x: touch.clientX,\n      y: touch.clientY\n    });\n    setDragOffset(0);\n  };\n  const handleTouchMove = e => {\n    if (!isDragging) return;\n    const touch = e.touches[0];\n    const deltaX = touch.clientX - dragStart.x;\n    // Apply some resistance to make dragging feel more natural\n    const dampedDelta = deltaX * 0.8;\n    setDragOffset(dampedDelta);\n  };\n  const handleTouchEnd = () => {\n    handleMouseUp();\n  };\n\n  // All cards exist as fixed objects arranged around a 3D globe's equator\n  const allCardsIn3D = relatedCards.map((cardData, index) => {\n    const totalCards = relatedCards.length;\n    const globeRadius = 300; // Radius of the globe\n\n    // Calculate position around the equator (Y = 0 for equator)\n    const angle = index / totalCards * 2 * Math.PI; // Evenly space cards around circle\n    const x = Math.cos(angle) * globeRadius; // X position on circle\n    const y = 0; // All cards on equator (Y = 0)\n    const z = Math.sin(angle) * globeRadius; // Z position on circle\n\n    return {\n      ...cardData,\n      absoluteIndex: index,\n      positionInSpace: index,\n      x3d: x,\n      y3d: y,\n      z3d: z,\n      angle: angle // Store angle for reference\n    };\n  });\n\n  // Function to find nearest cards to current camera position\n  const findNearestCard = direction => {\n    const currentCard = allCardsIn3D.find(card => card.id === card.id) || allCardsIn3D[0];\n\n    // Find all other cards and sort by distance from current camera position\n    const otherCards = allCardsIn3D.filter(card => card.id !== currentCard.id);\n    const sortedByDistance = otherCards.sort((a, b) => {\n      const distA = Math.sqrt(Math.pow(a.x3d - cameraPosition.x, 2) + Math.pow(a.y3d - cameraPosition.y, 2) + Math.pow(a.z3d - cameraPosition.z, 2));\n      const distB = Math.sqrt(Math.pow(b.x3d - cameraPosition.x, 2) + Math.pow(b.y3d - cameraPosition.y, 2) + Math.pow(b.z3d - cameraPosition.z, 2));\n      return distA - distB;\n    });\n\n    // Return the closest card (for now, ignore direction)\n    return sortedByDistance[0] || allCardsIn3D[0];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 z-50 bg-black backdrop-blur-sm flex items-center justify-center\",\n    onClick: handleBackdropClick,\n    onMouseUp: handleMouseUp,\n    onMouseLeave: handleMouseUp,\n    style: {\n      perspective: '1200px',\n      // 3D perspective for the entire scene\n      perspectiveOrigin: 'center center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: e => {\n        e.stopPropagation();\n        onClose();\n      },\n      className: \"absolute top-8 right-8 z-60 w-12 h-12 rounded-full bg-white/10 backdrop-blur-md border border-white/20 flex items-center justify-center hover:bg-white/20 transition-all duration-300\",\n      children: /*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"w-6 h-6 text-white\",\n        fill: \"none\",\n        stroke: \"currentColor\",\n        viewBox: \"0 0 24 24\",\n        children: /*#__PURE__*/_jsxDEV(\"path\", {\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\",\n          strokeWidth: 2,\n          d: \"M6 18L18 6M6 6l12 12\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      className: \"relative w-full h-full flex items-center justify-center cursor-grab active:cursor-grabbing\",\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onTouchStart: handleTouchStart,\n      onTouchMove: handleTouchMove,\n      onTouchEnd: handleTouchEnd,\n      style: {\n        transform: `\n            translateX(${dragOffset - cameraPosition.x}px)\n            translateY(${cameraPosition.y}px)\n            translateZ(${cameraPosition.z}px)\n            rotateX(${cameraPosition.rotationX}deg)\n            rotateY(${cameraPosition.rotationY + dragOffset * -0.02}deg)\n          `,\n        transition: isDragging ? 'none' : 'transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)',\n        transformStyle: 'preserve-3d'\n      },\n      children: [allCardsIn3D.map(cardData => {\n        // Use pre-calculated 3D positions\n        const x = cardData.x3d;\n        const y = cardData.y3d;\n        const z = cardData.z3d;\n\n        // Calculate distance from camera position for effects\n        const dx = x - cameraPosition.x;\n        const dy = y - cameraPosition.y;\n        const dz = z - cameraPosition.z;\n        const distanceFromCamera = Math.sqrt(dx * dx + dy * dy + dz * dz) / 100; // Normalize distance\n\n        // 3D perspective effects based on distance from camera\n        const scale = Math.max(0.2, 1 - distanceFromCamera * 0.1); // Perspective scaling\n        const opacity = Math.max(0.1, 1 - distanceFromCamera * 0.15); // Fade with distance\n        const zIndex = Math.round(50 - distanceFromCamera * 5); // Z-ordering\n\n        // Random rotation for each card in 3D space (using same seed for consistency)\n        const seed = cardData.positionInSpace * 12345;\n        const random4 = ((seed + 3) * 9301 + 49297) % 233280 / 233280;\n        const random5 = ((seed + 4) * 9301 + 49297) % 233280 / 233280;\n        const rotationX = (random4 - 0.5) * 60; // Random X rotation -30 to +30 degrees\n        const rotationY = (random5 - 0.5) * 60; // Random Y rotation -30 to +30 degrees\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute transition-all duration-500 ease-out\",\n          style: {\n            transform: `\n                  translate3d(${x}px, ${y}px, ${z}px) \n                  scale(${scale}) \n                  rotateY(${rotationY}deg) \n                  rotateX(${rotationX}deg)\n                `,\n            opacity,\n            zIndex,\n            transformOrigin: 'center center',\n            transformStyle: 'preserve-3d'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"relative w-80 h-80 rounded-2xl overflow-hidden backdrop-blur-xl border border-white/20 shadow-xl shadow-black/40 transition-all duration-500\",\n            style: {\n              transform: Math.round(cameraPosition.x / 200) === cardData.absoluteIndex && isFlipped ? 'rotateY(180deg)' : 'rotateY(0deg)',\n              transformStyle: 'preserve-3d'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"absolute inset-0\",\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: cardData.img,\n                alt: cardData.title,\n                className: \"w-full h-full object-cover\",\n                draggable: false\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"absolute inset-0 flex flex-col justify-end p-6\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                  className: \"font-bold text-white mb-2 text-2xl transition-all duration-500\",\n                  children: cardData.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 324,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"text-white/80 text-base transition-all duration-500\",\n                  children: cardData.subtitle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 327,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 16\n          }, this)\n        }, cardData.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 25\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute -bottom-28 left-1/2 -translate-x-1/2 text-center z-60 pointer-events-none\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white/10 backdrop-blur-md rounded-2xl px-6 py-4 border border-white/20\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-white/60 text-sm mb-1\",\n            children: \"Viewing 3D Space\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-white font-semibold text-base\",\n            children: \"Cards Scattered in 3D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-8 left-8 bg-white/10 backdrop-blur-md rounded-xl px-6 py-3 border border-white/20 pointer-events-none\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white/80 text-base\",\n        children: [relatedCards.length, \" Cards in 3D Space\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n}\n_s(CardDetail, \"H4SyGmwqt2nwwB/sOfnLM2cj93Q=\");\n_c = CardDetail;\nvar _c;\n$RefreshReg$(_c, \"CardDetail\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","CardDetail","card","onClose","onNavigate","relatedCards","_s","cameraPosition","setCameraPosition","x","y","z","rotationY","rotationX","dragStart","setDragStart","isDragging","setIsDragging","dragOffset","setDragOffset","isFlipped","setIsFlipped","containerRef","cardIndex","findIndex","c","id","targetIndex","totalCards","length","globeRadius","targetAngle","Math","PI","cardX","cos","cardY","cardZ","sin","cameraDistance","cameraX","cameraY","cameraZ","timer","setTimeout","clearTimeout","keyHandler","e","key","nearestCard","findNearestCard","x3d","y3d","z3d","document","addEventListener","removeEventListener","handleBackdropClick","target","currentTarget","handleMouseDown","clientX","clientY","handleMouseMove","deltaX","dampedDelta","handleMouseUp","threshold","cardSpacing","currentCardIndex","round","shouldSnapToNext","shouldSnapToPrevious","handleTouchStart","touch","touches","handleTouchMove","handleTouchEnd","allCardsIn3D","map","cardData","index","angle","absoluteIndex","positionInSpace","direction","currentCard","find","otherCards","filter","sortedByDistance","sort","a","b","distA","sqrt","pow","distB","className","onClick","onMouseUp","onMouseLeave","style","perspective","perspectiveOrigin","children","stopPropagation","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","fileName","_jsxFileName","lineNumber","columnNumber","ref","onMouseDown","onMouseMove","onTouchStart","onTouchMove","onTouchEnd","transform","transition","transformStyle","dx","dy","dz","distanceFromCamera","scale","max","opacity","zIndex","seed","random4","random5","transformOrigin","src","img","alt","title","draggable","subtitle","_c","$RefreshReg$"],"sources":["C:/Users/mrluf/Desktop/deck cards/src/components/CardDetail.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\n\r\ninterface CardData {\r\n  id: string;\r\n  img: string;\r\n  title: string;\r\n  subtitle: string;\r\n  category?: string;\r\n}\r\n\r\ninterface CardDetailProps {\r\n  card: CardData;\r\n  onClose: () => void;\r\n  onNavigate: (direction: 'left' | 'right') => void;\r\n  relatedCards: CardData[];\r\n}\r\n\r\nexport default function CardDetail({ card, onClose, onNavigate, relatedCards }: CardDetailProps) {\r\n  // 3D Camera system - camera position in 3D space\r\n  const [cameraPosition, setCameraPosition] = useState({ x: 0, y: 0, z: 0, rotationY: 0, rotationX: 0 });\r\n  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });\r\n  const [isDragging, setIsDragging] = useState(false);\r\n  const [dragOffset, setDragOffset] = useState(0);\r\n  const [isFlipped, setIsFlipped] = useState(false);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Initialize camera position to focus on clicked card on the globe\r\n  useEffect(() => {\r\n    const cardIndex = relatedCards.findIndex(c => c.id === card.id);\r\n    const targetIndex = cardIndex >= 0 ? cardIndex : 0;\r\n    \r\n    // Calculate the target card's position on the globe's equator\r\n    const totalCards = relatedCards.length;\r\n    const globeRadius = 300;\r\n    const targetAngle = (targetIndex / totalCards) * 2 * Math.PI;\r\n    \r\n    const cardX = Math.cos(targetAngle) * globeRadius;\r\n    const cardY = 0; // Card is on equator\r\n    const cardZ = Math.sin(targetAngle) * globeRadius;\r\n    \r\n    // Position camera outside the globe, looking at the target card\r\n    const cameraDistance = globeRadius + 200; // Camera distance from globe center\r\n    const cameraX = Math.cos(targetAngle) * cameraDistance;\r\n    const cameraY = 100; // Slightly above equator for better view\r\n    const cameraZ = Math.sin(targetAngle) * cameraDistance;\r\n    \r\n    setCameraPosition({\r\n      x: cameraX,\r\n      y: cameraY,\r\n      z: cameraZ,\r\n      rotationY: 0, // Face toward globe center\r\n      rotationX: -10 // Look slightly down at the equator\r\n    });\r\n  }, [card.id, relatedCards]);\r\n\r\n  // Handle card flip for the card closest to camera\r\n  useEffect(() => {\r\n    setIsFlipped(true);\r\n    const timer = setTimeout(() => setIsFlipped(false), 600);\r\n    return () => clearTimeout(timer);\r\n  }, [cameraPosition.x]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const keyHandler = (e: KeyboardEvent) => {\r\n      if (e.key === 'Escape') onClose();\r\n      if (e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\r\n        // Move camera to nearest card in 3D space\r\n        const nearestCard = findNearestCard(e.key === 'ArrowLeft' ? 'left' : 'right');\r\n        if (nearestCard) {\r\n          setCameraPosition({\r\n            x: nearestCard.x3d,\r\n            y: nearestCard.y3d - 150, // Position camera above the card\r\n            z: nearestCard.z3d + 300, // Pull camera back for better view\r\n            rotationY: 0, // Face forward\r\n            rotationX: -20 // Look slightly down at the card\r\n          });\r\n        }\r\n      }\r\n    };\r\n    \r\n    document.addEventListener('keydown', keyHandler);\r\n    return () => document.removeEventListener('keydown', keyHandler);\r\n  }, [onClose, cameraPosition.x, relatedCards.length]);\r\n\r\n  // Handle click outside to close\r\n  const handleBackdropClick = (e: React.MouseEvent) => {\r\n    if (e.target === e.currentTarget) {\r\n      onClose();\r\n    }\r\n  };\r\n\r\n  // Swipe/drag navigation\r\n  const handleMouseDown = (e: React.MouseEvent) => {\r\n    setIsDragging(true);\r\n    setDragStart({ x: e.clientX, y: e.clientY });\r\n    setDragOffset(0);\r\n  };\r\n\r\n  const handleMouseMove = (e: React.MouseEvent) => {\r\n    if (!isDragging) return;\r\n    const deltaX = e.clientX - dragStart.x;\r\n    // Apply some resistance to make dragging feel more natural\r\n    const dampedDelta = deltaX * 0.8;\r\n    setDragOffset(dampedDelta);\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    if (!isDragging) return;\r\n    \r\n    const threshold = 60;\r\n    const cardSpacing = 200;\r\n    const currentCardIndex = Math.round(cameraPosition.x / cardSpacing);\r\n    \r\n    // Calculate if we should snap to next/previous card in 3D space\r\n    const shouldSnapToNext = dragOffset < -threshold && currentCardIndex < relatedCards.length - 1;\r\n    const shouldSnapToPrevious = dragOffset > threshold && currentCardIndex > 0;\r\n    \r\n    if (shouldSnapToNext) {\r\n      // Move camera to nearest card in 3D space\r\n      const nearestCard = findNearestCard('right');\r\n      if (nearestCard) {\r\n        setCameraPosition({\r\n          x: nearestCard.x3d,\r\n          y: nearestCard.y3d - 150, // Position camera above the card\r\n          z: nearestCard.z3d + 300, // Pull camera back for better view\r\n          rotationY: 0, // Face forward\r\n          rotationX: -20 // Look slightly down at the card\r\n        });\r\n      }\r\n    } else if (shouldSnapToPrevious) {\r\n      // Move camera to nearest card in 3D space\r\n      const nearestCard = findNearestCard('left');\r\n      if (nearestCard) {\r\n        setCameraPosition({\r\n          x: nearestCard.x3d,\r\n          y: nearestCard.y3d - 150, // Position camera above the card\r\n          z: nearestCard.z3d + 300, // Pull camera back for better view\r\n          rotationY: 0, // Face forward\r\n          rotationX: -20 // Look slightly down at the card\r\n        });\r\n      }\r\n    }\r\n    \r\n    setIsDragging(false);\r\n    setDragOffset(0);\r\n  };\r\n\r\n  // Touch events for mobile\r\n  const handleTouchStart = (e: React.TouchEvent) => {\r\n    const touch = e.touches[0];\r\n    setIsDragging(true);\r\n    setDragStart({ x: touch.clientX, y: touch.clientY });\r\n    setDragOffset(0);\r\n  };\r\n\r\n  const handleTouchMove = (e: React.TouchEvent) => {\r\n    if (!isDragging) return;\r\n    const touch = e.touches[0];\r\n    const deltaX = touch.clientX - dragStart.x;\r\n    // Apply some resistance to make dragging feel more natural\r\n    const dampedDelta = deltaX * 0.8;\r\n    setDragOffset(dampedDelta);\r\n  };\r\n\r\n  const handleTouchEnd = () => {\r\n    handleMouseUp();\r\n  };\r\n\r\n  // All cards exist as fixed objects arranged around a 3D globe's equator\r\n  const allCardsIn3D = relatedCards.map((cardData, index) => {\r\n    const totalCards = relatedCards.length;\r\n    const globeRadius = 300; // Radius of the globe\r\n    \r\n    // Calculate position around the equator (Y = 0 for equator)\r\n    const angle = (index / totalCards) * 2 * Math.PI; // Evenly space cards around circle\r\n    const x = Math.cos(angle) * globeRadius; // X position on circle\r\n    const y = 0; // All cards on equator (Y = 0)\r\n    const z = Math.sin(angle) * globeRadius; // Z position on circle\r\n    \r\n    return {\r\n      ...cardData,\r\n      absoluteIndex: index,\r\n      positionInSpace: index,\r\n      x3d: x,\r\n      y3d: y,\r\n      z3d: z,\r\n      angle: angle // Store angle for reference\r\n    };\r\n  });\r\n\r\n  // Function to find nearest cards to current camera position\r\n  const findNearestCard = (direction: 'left' | 'right') => {\r\n    const currentCard = allCardsIn3D.find(card => card.id === card.id) || allCardsIn3D[0];\r\n    \r\n    // Find all other cards and sort by distance from current camera position\r\n    const otherCards = allCardsIn3D.filter(card => card.id !== currentCard.id);\r\n    \r\n    const sortedByDistance = otherCards.sort((a, b) => {\r\n      const distA = Math.sqrt(\r\n        Math.pow(a.x3d - cameraPosition.x, 2) +\r\n        Math.pow(a.y3d - cameraPosition.y, 2) +\r\n        Math.pow(a.z3d - cameraPosition.z, 2)\r\n      );\r\n      const distB = Math.sqrt(\r\n        Math.pow(b.x3d - cameraPosition.x, 2) +\r\n        Math.pow(b.y3d - cameraPosition.y, 2) +\r\n        Math.pow(b.z3d - cameraPosition.z, 2)\r\n      );\r\n      return distA - distB;\r\n    });\r\n    \r\n    // Return the closest card (for now, ignore direction)\r\n    return sortedByDistance[0] || allCardsIn3D[0];\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className=\"fixed inset-0 z-50 bg-black backdrop-blur-sm flex items-center justify-center\"\r\n      onClick={handleBackdropClick}\r\n      onMouseUp={handleMouseUp}\r\n      onMouseLeave={handleMouseUp}\r\n      style={{\r\n        perspective: '1200px', // 3D perspective for the entire scene\r\n        perspectiveOrigin: 'center center'\r\n      }}\r\n    >\r\n      {/* Close button */}\r\n      <button\r\n        onClick={(e) => {\r\n          e.stopPropagation();\r\n          onClose();\r\n        }}\r\n        className=\"absolute top-8 right-8 z-60 w-12 h-12 rounded-full bg-white/10 backdrop-blur-md border border-white/20 flex items-center justify-center hover:bg-white/20 transition-all duration-300\"\r\n      >\r\n        <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n        </svg>\r\n      </button>\r\n\r\n            {/* 3D Canvas with all 10 cards */}\r\n      <div \r\n        ref={containerRef}\r\n        className=\"relative w-full h-full flex items-center justify-center cursor-grab active:cursor-grabbing\"\r\n        onMouseDown={handleMouseDown}\r\n        onMouseMove={handleMouseMove}\r\n        onTouchStart={handleTouchStart}\r\n        onTouchMove={handleTouchMove}\r\n        onTouchEnd={handleTouchEnd}\r\n        style={{\r\n          transform: `\r\n            translateX(${dragOffset - cameraPosition.x}px)\r\n            translateY(${cameraPosition.y}px)\r\n            translateZ(${cameraPosition.z}px)\r\n            rotateX(${cameraPosition.rotationX}deg)\r\n            rotateY(${cameraPosition.rotationY + (dragOffset * -0.02)}deg)\r\n          `,\r\n          transition: isDragging ? 'none' : 'transform 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)',\r\n          transformStyle: 'preserve-3d'\r\n        }}\r\n      >\r\n        {allCardsIn3D.map((cardData) => {\r\n          // Use pre-calculated 3D positions\r\n          const x = cardData.x3d;\r\n          const y = cardData.y3d;\r\n          const z = cardData.z3d;\r\n          \r\n          // Calculate distance from camera position for effects\r\n          const dx = x - cameraPosition.x;\r\n          const dy = y - cameraPosition.y;\r\n          const dz = z - cameraPosition.z;\r\n          const distanceFromCamera = Math.sqrt(dx*dx + dy*dy + dz*dz) / 100; // Normalize distance\r\n          \r\n          // 3D perspective effects based on distance from camera\r\n          const scale = Math.max(0.2, 1 - distanceFromCamera * 0.1); // Perspective scaling\r\n          const opacity = Math.max(0.1, 1 - distanceFromCamera * 0.15); // Fade with distance\r\n          const zIndex = Math.round(50 - distanceFromCamera * 5); // Z-ordering\r\n          \r\n          // Random rotation for each card in 3D space (using same seed for consistency)\r\n          const seed = cardData.positionInSpace * 12345;\r\n          const random4 = (((seed + 3) * 9301 + 49297) % 233280) / 233280;\r\n          const random5 = (((seed + 4) * 9301 + 49297) % 233280) / 233280;\r\n          const rotationX = (random4 - 0.5) * 60; // Random X rotation -30 to +30 degrees\r\n          const rotationY = (random5 - 0.5) * 60; // Random Y rotation -30 to +30 degrees\r\n          \r\n          return (\r\n                        <div\r\n              key={cardData.id}\r\n              className=\"absolute transition-all duration-500 ease-out\"\r\n              style={{\r\n                transform: `\r\n                  translate3d(${x}px, ${y}px, ${z}px) \r\n                  scale(${scale}) \r\n                  rotateY(${rotationY}deg) \r\n                  rotateX(${rotationX}deg)\r\n                `,\r\n                opacity,\r\n                zIndex,\r\n                transformOrigin: 'center center',\r\n                transformStyle: 'preserve-3d'\r\n              }}\r\n            >\r\n                             {/* Card - all cards are equal objects */}\r\n               <div className=\"relative w-80 h-80 rounded-2xl overflow-hidden backdrop-blur-xl border border-white/20 shadow-xl shadow-black/40 transition-all duration-500\"\r\n                               style={{\r\n                  transform: Math.round(cameraPosition.x / 200) === cardData.absoluteIndex && isFlipped ? 'rotateY(180deg)' : 'rotateY(0deg)',\r\n                  transformStyle: 'preserve-3d'\r\n                }}>\r\n                {/* Background image */}\r\n                <div className=\"absolute inset-0\">\r\n                  <img\r\n                    src={cardData.img}\r\n                    alt={cardData.title}\r\n                    className=\"w-full h-full object-cover\"\r\n                    draggable={false}\r\n                  />\r\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent\" />\r\n                </div>\r\n\r\n                {/* Content overlay - all cards have same content styling */}\r\n                <div className=\"absolute inset-0 flex flex-col justify-end p-6\">\r\n                  <div className=\"text-center\">\r\n                    <h2 className=\"font-bold text-white mb-2 text-2xl transition-all duration-500\">\r\n                      {cardData.title}\r\n                    </h2>\r\n                    <p className=\"text-white/80 text-base transition-all duration-500\">\r\n                      {cardData.subtitle}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n\r\n\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n\r\n        {/* Current card info */}\r\n        <div className=\"absolute -bottom-28 left-1/2 -translate-x-1/2 text-center z-60 pointer-events-none\">\r\n          <div className=\"bg-white/10 backdrop-blur-md rounded-2xl px-6 py-4 border border-white/20\">\r\n            <p className=\"text-white/60 text-sm mb-1\">Viewing 3D Space</p>\r\n            <p className=\"text-white font-semibold text-base\">\r\n              Cards Scattered in 3D\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n\r\n\r\n      {/* Card counter */}\r\n      <div className=\"absolute top-8 left-8 bg-white/10 backdrop-blur-md rounded-xl px-6 py-3 border border-white/20 pointer-events-none\">\r\n        <p className=\"text-white/80 text-base\">\r\n          {relatedCards.length} Cards in 3D Space\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}